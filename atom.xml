<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>醉里挑灯赏猫</title>
  
  <subtitle>班班的碎碎念</subtitle>
  <link href="https://blog.dlzhang.com/atom.xml" rel="self"/>
  
  <link href="https://blog.dlzhang.com/"/>
  <updated>2020-11-27T23:34:16.432Z</updated>
  <id>https://blog.dlzhang.com/</id>
  
  <author>
    <name>班班</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【告示】临时关闭评论</title>
    <link href="https://blog.dlzhang.com/posts/announcement/"/>
    <id>https://blog.dlzhang.com/posts/announcement/</id>
    <published>2020-11-26T16:00:00.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>由于 Valine 评论系统受到多次大量垃圾评论攻击，临时关闭了评论功能，并选择永久性放弃 Valine 评论系统，待选择合适的评论系统后重新开放评论。</p><p>在此郑重警告进行垃圾评论攻击幕后之人，无论出于什么目的，请堂堂正正、光明正大做事，不要尽做一些偷鸡摸狗之事。互联网不是法外之地，网络空间的良好环境需要大家共同维护！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于 Valine 评论系统受到多次大量垃圾评论攻击，临时关闭了评论功能，并选择永久性放弃 Valine 评论系统，待选择合适的评论系统后重新开放评论。&lt;/p&gt;
&lt;p&gt;在此郑重警告进行垃圾评论攻击幕后之人，无论出于什么目的，请堂堂正正、光明正大做事，不要尽做一些偷鸡摸狗之事</summary>
      
    
    
    
    <category term="碎碎念" scheme="https://blog.dlzhang.com/overview/life/"/>
    
    
    <category term="告示" scheme="https://blog.dlzhang.com/overview/tags/%E5%91%8A%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>持续集成部署博客脚本</title>
    <link href="https://blog.dlzhang.com/posts/53/"/>
    <id>https://blog.dlzhang.com/posts/53/</id>
    <published>2020-11-10T06:49:04.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>持续集成（Continuous integration，简称 CI）部署 Hexo 博客比起每次都手动构建部署方便很多，现在都是本地用 GitKraken 把更新的博客源文件推送到 GitHub 仓库，然后由 GitHub Actions 进行后续的构建、部署操作，同时还可以把运行结果推送到 Telegram。这里分享几个我之前用过的持续集成脚本。<a id="more"></a></p><h2 id="1-GitHub-Actions"><a href="#1-GitHub-Actions" class="headerlink" title="1. GitHub Actions"></a>1. GitHub Actions</h2> <figure class="highlight yaml"><figcaption><span>deployment.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##################################</span></span><br><span class="line"><span class="comment"># Aliyun OSS</span></span><br><span class="line"><span class="comment">##################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Aliyun</span> <span class="string">oss</span> <span class="string">util</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">manyuanrong/setup-ossutil@v1.0</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.OSS_ENDPOINT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">access-key-id:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.OSS_KEY_ID</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">access-key-secret:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.OSS_KEY_SECRET</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">html</span> <span class="string">to</span> <span class="string">oss</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">OSS_BUCKET:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.OSS_BUCKET</span> <span class="string">&#125;&#125;</span> <span class="string">bucket</span> <span class="string">name</span> <span class="string">without</span> <span class="string">endpoint</span> <span class="string">domain</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">rm</span> <span class="string">-rf</span> <span class="string">public/css/</span> <span class="string">public/js/</span> <span class="string">public/images/</span></span><br><span class="line">    <span class="string">ossutil</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">oss://$OSS_BUCKET/</span></span><br><span class="line">    <span class="string">ossutil</span> <span class="string">cp</span> <span class="string">-rf</span> <span class="string">public/</span> <span class="string">oss://$OSS_BUCKET/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################</span></span><br><span class="line"><span class="comment"># Tencent Cloud COS</span></span><br><span class="line"><span class="comment">##################################</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Python</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/setup-python@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">python-version:</span> <span class="string">&#x27;3.x&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">pip</span> <span class="string">cache</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">pip-cache</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">python</span> <span class="string">-c</span> <span class="string">&quot;from pip._internal.locations import USER_CACHE_DIR; print(&#x27;::set-output name=dir::&#x27; + USER_CACHE_DIR)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">coscmd</span> <span class="string">requirements</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">wget</span> <span class="string">https://raw.githubusercontent.com/tencentyun/coscmd/master/requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Pip</span> <span class="string">cache</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.pip-cache.outputs.dir</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-pip-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/requirements.txt&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-pip-</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">coscmd</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">SECRET_ID:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.COS_SECRET_ID</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SECRET_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.COS_SECRET_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">BUCKET:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.COS_BUCKET</span> <span class="string">&#125;&#125;</span> <span class="comment">#bucket name with qcloud_user_id</span></span><br><span class="line">    <span class="attr">REGION:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.COS_REGION</span> <span class="string">&#125;&#125;</span> <span class="comment">#eg. ap-shanghai</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">pip</span> <span class="string">install</span> <span class="string">-U</span> <span class="string">coscmd</span></span><br><span class="line">    <span class="string">coscmd</span> <span class="string">config</span> <span class="string">-a</span> <span class="string">$SECRET_ID</span> <span class="string">-s</span> <span class="string">$SECRET_KEY</span> <span class="string">-b</span> <span class="string">$BUCKET</span> <span class="string">-r</span> <span class="string">$REGION</span> <span class="string">-m</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">assets</span> <span class="string">to</span> <span class="string">cos</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">coscmd</span> <span class="string">upload</span> <span class="string">-rs</span> <span class="string">--delete</span> <span class="string">public/css</span> <span class="string">assets/css-blog</span> <span class="string">-f</span></span><br><span class="line">    <span class="string">coscmd</span> <span class="string">upload</span> <span class="string">-rs</span> <span class="string">--delete</span> <span class="string">public/js</span> <span class="string">assets/js</span> <span class="string">-f</span></span><br><span class="line">    <span class="string">coscmd</span> <span class="string">upload</span> <span class="string">-rs</span> <span class="string">--delete</span> <span class="string">source/images</span> <span class="string">assets/images</span> <span class="string">-f</span></span><br><span class="line">    <span class="string">coscmd</span> <span class="string">upload</span> <span class="string">-rs</span> <span class="string">--delete</span> <span class="string">source/live2d</span> <span class="string">assets/live2d</span> <span class="string">-f</span></span><br><span class="line">    <span class="string">rm</span> <span class="string">-rf</span> <span class="string">public/css</span> <span class="string">public/js</span> <span class="string">public/images</span> <span class="string">public/live2d</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################</span></span><br><span class="line"><span class="comment"># Deploy to Github</span></span><br><span class="line"><span class="comment">##################################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GIT_NAME:</span> <span class="string">lei2rock</span></span><br><span class="line">    <span class="attr">GIT_EMAIL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GIT_EMAIL</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">REPO:</span> <span class="string">github.com/lei2rock/blog</span></span><br><span class="line">    <span class="attr">GH_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">cd</span> <span class="string">./public</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">init</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">    <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_NAME</span></span><br><span class="line">    <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line">    <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Site deployed by GitHub Actions&quot;</span></span><br><span class="line">    <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$GH_TOKEN@$REPO&quot;</span> <span class="string">master:master</span></span><br></pre></td></tr></table></figure><h2 id="2-Netlify"><a href="#2-Netlify" class="headerlink" title="2. Netlify"></a>2. Netlify</h2><figure class="highlight toml"><figcaption><span>netlify.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Settings in the [build] context are global and are applied to all contexts </span></span><br><span class="line"><span class="comment"># unless otherwise overridden by more specific contexts.  </span></span><br><span class="line"><span class="section">[build]</span></span><br><span class="line">  <span class="comment"># Directory to change to before starting a build. </span></span><br><span class="line">  <span class="comment"># This is where we will look for package.json/.nvmrc/etc.</span></span><br><span class="line">  <span class="attr">base</span> = <span class="string">&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Directory (relative to root of your repo) that contains the deploy-ready </span></span><br><span class="line">  <span class="comment"># HTML files and assets generated by the build. If a base directory has</span></span><br><span class="line">  <span class="comment"># been specified, include it in the publish directory path.</span></span><br><span class="line">  <span class="attr">publish</span> = <span class="string">&quot;/public&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default build command.</span></span><br><span class="line">  <span class="attr">command</span> = <span class="string">&quot;hexo generate --silent&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[redirects]]</span></span><br><span class="line">  <span class="attr">from</span> = <span class="string">&quot;https://lei2rock-blog.netlify.com/*&quot;</span></span><br><span class="line">  <span class="attr">to</span> = <span class="string">&quot;https://blog.dlzhang.com/:splat&quot;</span></span><br><span class="line">  <span class="attr">status</span> = <span class="number">301</span></span><br><span class="line">  <span class="attr">force</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[redirects]]</span></span><br><span class="line">  <span class="attr">from</span> = <span class="string">&quot;/cloud/*&quot;</span></span><br><span class="line">  <span class="attr">to</span> = <span class="string">&quot;https://bucket-name.file.myqcloud.com/:splat&quot;</span></span><br><span class="line">  <span class="attr">status</span> = <span class="number">200</span></span><br><span class="line">  <span class="attr">force</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3-Travis-CI"><a href="#3-Travis-CI" class="headerlink" title="3. Travis CI"></a>3. Travis CI</h2><figure class="highlight yaml"><figcaption><span>.travis.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">src</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">yarn:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">global</span> <span class="string">add</span> <span class="string">hexo-cli</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_NAME</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">&quot;s/GH_TOKEN/$GH_TOKEN/g&quot;</span> <span class="string">./_config.yml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span> <span class="string">-m</span> <span class="string">&quot;Travis CI Build $&#123;TRAVIS_BUILD_NUMBER&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">email:</span></span><br><span class="line">    <span class="attr">recipients:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line">    <span class="attr">on_success:</span> <span class="string">change</span> <span class="comment"># default: change</span></span><br><span class="line">    <span class="attr">on_failure:</span> <span class="string">always</span> <span class="comment"># default: always</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;持续集成（Continuous integration，简称 CI）部署 Hexo 博客比起每次都手动构建部署方便很多，现在都是本地用 GitKraken 把更新的博客源文件推送到 GitHub 仓库，然后由 GitHub Actions 进行后续的构建、部署操作，同时还可以把运行结果推送到 Telegram。这里分享几个我之前用过的持续集成脚本。</summary>
    
    
    
    <category term="科技树" scheme="https://blog.dlzhang.com/overview/tech/"/>
    
    
    <category term="GitHub Actions" scheme="https://blog.dlzhang.com/overview/tags/GitHub-Actions/"/>
    
    <category term="持续集成" scheme="https://blog.dlzhang.com/overview/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>优秀纪录片分享</title>
    <link href="https://blog.dlzhang.com/posts/52/"/>
    <id>https://blog.dlzhang.com/posts/52/</id>
    <published>2020-11-05T01:21:28.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>一些自己看过的优秀纪录片，以 CCTV 与 BBC 拍摄的纪录片为主，大多是人文历史或者社会纪实类型。自然地理方面的纪录片很少，主要是因为个人对这个题材的纪录片不太感兴趣。<a id="more"></a></p><h3 id="国产纪录片"><a href="#国产纪录片" class="headerlink" title="国产纪录片"></a>国产纪录片</h3><ul><li><p><strong>超级工程</strong> <font color=#bbb>CCTV 科技</font><br>第三季模仿了 PBS 的 America Revealed，之前看时候就在想中国什么时候也这样拍一部就完美了，然后央视就满足了我的愿望；此外饱受争议的纪录片《辉煌中国》与电影《厉害了我的国》很多素材其实来自超级工程相关纪录片，所以剪辑拼凑痕迹明显，制作比较粗糙，看辉煌中国还不如看超级工程。</p></li><li><p><strong>舌尖上的中国</strong> <font color=#bbb>CCTV 社会文化</font><br>陈晓卿的美食纪录片，讲述美食遍布中华大地，不过《舌尖上的中国》只推荐第一、二季，第三季水平下滑严重，不值得推荐。</p></li><li><p><strong>风味人间</strong> <font color=#bbb>腾讯视频 社会文化</font><br>陈晓卿的美食纪录片，不同于之前的美食纪录片，本片不只是局限在中国，一大亮点就是中外对于同一种食材或者不同风格食材处理方式的对比。</p></li><li><p><strong>过台湾</strong> <font color=#bbb>CCTV 历史</font><br>讲述台湾1945年光复之前400年的历史变迁，史料翔实覆盖广泛，配乐也超级有魔性；如果需要了解台湾光复前后的历史还可以看《台湾·1945》。</p></li><li><p><strong>我在故宫修文物</strong> <font color=#bbb>CCTV 文化</font><br>网红纪录片不解释</p></li><li><p><strong>再说长江</strong> <font color=#bbb>CCTV 社会纪实</font><br>长江流域人文风土纪录片，呼应八十年代爆火纪录片《话说长江》。话说长江算是和同年代央视纪录片《河殇》走了不同的路线，该片在讲述人文风土同时也某种程度上提升了当时民众的民族自豪感与自信心</p></li><li><p><strong>大国崛起</strong> <font color=#bbb>CCTV 历史</font><br>讲述西方历史上各强国崛起历史，本质是为了探究中国复兴之路，这个目的从纪录片最后一集就可以看出来了。此外，该纪录片的旁白稿子很棒，单独拿出来都是一份很好的学习材料。</p></li><li><p><strong>东方卫视医警系列</strong> <font color=#bbb>东方卫视 社会纪实</font><br>有《巡逻现场实录》、《急诊室故事》、《生命时速·紧急救护120》等多部，跟踪拍摄上海市的警察巡逻、院前急救、急诊室抢救等故事，既是记录社会生活的点点滴滴，也展现了管理上海市这样一个超大型城市所需要的精细度。</p></li><li><p><strong>我的铁路，我的故事</strong> <font color=#bbb>CCTV 社会纪实</font><br>中国援建蒙巴萨-内罗毕铁路的故事，该片有英文版 My Railway, My Story；该片中有很多有趣的援非工程故事，以小见大讲述了中国援非工程的实施过程。</p></li></ul><h3 id="日本纪录片"><a href="#日本纪录片" class="headerlink" title="日本纪录片"></a>日本纪录片</h3><ul><li><p><strong>纪实72小时 ドキュメント72時間</strong> <font color=#bbb>NHK 社会纪实</font><br>用72小时不间断地拍摄记录日本的寻常生活，有欢笑有悲伤，每集看完总有一种依依不舍之情。目前，东方卫视也引进了版权，拍摄了中国版的《纪实72小时》。</p></li><li><p><strong>可以跟着去你家吗？ 家、ついて行ってイイですか?</strong> <font color=#bbb>东京电视台 社会纪实</font><br>节目专门访问赶不上末班电车的陌生人，以支付计程车费来换取跟随到他们家访问的机会，进而领略纪录人生百态。</p></li></ul><h3 id="欧美纪录片"><a href="#欧美纪录片" class="headerlink" title="欧美纪录片"></a>欧美纪录片</h3><ul><li><p><strong>透视美国 America Revealed</strong> <font color=#bbb>PBS 社会纪实</font><br>用俯视的视角，从食品、交通、能源、制造四个方面全景展示了美国各个产业概况和不为人知的细节。最开始看的时候对美国的产业状况叹为观止，后来看了央视《超级工程》第三季发现我们用同样的视角也可以展现一个有活力、有创造力的中国。</p></li><li><p><strong>企鹅群里有特务 Penguins: Spy in the Huddle</strong> <font color=#bbb>BBC 自然地理</font><br>自然地理纪录片里难得一部很喜欢的片子，光看着各种企鹅卖萌的样子就很疗愈了，颜值果然很重要。</p></li><li><p><strong>空中浩劫 Mayday</strong> <font color=#bbb>Cineflix 科技与社会</font><br>各种惊心动魄，各种细致入微，细致的调查背后是对生命的尊重。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;一些自己看过的优秀纪录片，以 CCTV 与 BBC 拍摄的纪录片为主，大多是人文历史或者社会纪实类型。自然地理方面的纪录片很少，主要是因为个人对这个题材的纪录片不太感兴趣。</summary>
    
    
    
    <category term="碎碎念" scheme="https://blog.dlzhang.com/overview/life/"/>
    
    
    <category term="清单" scheme="https://blog.dlzhang.com/overview/tags/%E6%B8%85%E5%8D%95/"/>
    
    <category term="纪录片" scheme="https://blog.dlzhang.com/overview/tags/%E7%BA%AA%E5%BD%95%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>阅读书单</title>
    <link href="https://blog.dlzhang.com/posts/51/"/>
    <id>https://blog.dlzhang.com/posts/51/</id>
    <published>2020-11-05T01:20:38.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://book.douban.com/subject/2004652/"><strong>目击中国100年</strong></a>. 成勇<br>十分用心编写的一本书，或者更准确说是画册。用照片的方式展现有照片记录以来中国20世纪的诸多历史瞬间，让我们得以了解更生动立体的近现代中国。</p></li><li><p><a href="https://book.douban.com/subject/4113090/"><strong>我们台湾这些年</strong></a>. 廖信忠<br>一个个小人物的故事构成了台湾社会发展的方方面面，一本书或许不能帮助我们认识了解这个宝岛的过往，但是可以带给一个我们更真切的台湾。</p><a id="more"></a></li><li><p><a href="https://book.douban.com/subject/25864000/"><strong>台湾这些年所知道的祖国</strong></a>. 廖信忠<br>作者的系列作品了，不过说实话没有最初的《我们台湾这些年》好看。</p></li><li><p><a href="https://book.douban.com/subject/26847432/"><strong>為了活下去：脫北女孩朴研美</strong></a>. 朴研美<br>台湾旅游时候买回来的书，对于描述作者个人的经历确实比较同情，但是后面对于中国做法的看法以及对于基督教的理解还是不太认同的。特别是韩国传教士的问题，或许对作者这样的人来说是帮助，但是在中国的疯狂传教其实是很大隐患。</p></li><li><p><a href="https://book.douban.com/subject/20424526/"><strong>邓小平时代</strong></a>. 傅高义<br>资料翔实，叙述详尽，向我们展现了改革开放前后那个瞬息万变的历史时期。</p></li><li><p><a href="https://book.douban.com/subject/26899255/"><strong>进击的局座</strong></a>. 张召忠<br>局座的书，看中名气买的电子书，语言很朴实很真诚，不过不是我喜欢的话题和风格。</p></li><li><p><a href="https://book.douban.com/subject/26285840/"><strong>漫画世界系列3：漫画德国</strong></a>. 李元馥<br>高中时候班主任推荐的丛书，从漫画的角度了解各国的社会人文历史，也是很有趣味的，还希望能够把这套书都读一遍。</p></li><li><p><a href="https://book.douban.com/subject/1526244/"><strong>科学探索者 · 天文学</strong></a>. 帕迪利亚<br>小时候的天文学科普启蒙书之一，里面的好多小实验很有趣味，讲解的一些知识点现在都有印象。</p></li><li><p><a href="https://book.douban.com/subject/1137118/"><strong>放飞神舟</strong></a>. 石磊<br>我对中国载人航天的最初了解就是这本书带给我的，放飞神舟放飞的不只是载人飞船，而是这个民族几千年来的飞天梦想。如今，月球上的玉兔月球车正在延续我们的下一个梦想。</p></li><li><p><a href="https://book.douban.com/subject/4238941/"><strong>新卖桔者言</strong></a>. 张五常</p></li><li><p><a href="https://book.douban.com/subject/5252677/"><strong>幸福了吗？</strong></a>. 白岩松</p></li><li><p><a href="https://book.douban.com/subject/1016003/"><strong>鲁滨逊漂流记</strong></a>. 笛福</p></li><li><p><a href="https://book.douban.com/subject/3815131/"><strong>一九八四</strong></a>. 乔治 · 奥威尔</p></li><li><p><a href="https://book.douban.com/subject/26371139/"><strong>动物庄园</strong></a>. 乔治 · 奥威尔</p></li><li><p><a href="https://book.douban.com/subject/1050339/"><strong>文化苦旅</strong></a>. 余秋雨</p></li><li><p><a href="https://book.douban.com/subject/1008145/"><strong>围城</strong></a>. 钱钟书</p></li><li><p><a href="https://book.douban.com/subject/1258378/"><strong>他改变了中国</strong></a>. 罗伯特 · 劳伦斯 · 库恩</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/2004652/&quot;&gt;&lt;strong&gt;目击中国100年&lt;/strong&gt;&lt;/a&gt;. 成勇&lt;br&gt;十分用心编写的一本书，或者更准确说是画册。用照片的方式展现有照片记录以来中国20世纪的诸多历史瞬间，让我们得以了解更生动立体的近现代中国。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/4113090/&quot;&gt;&lt;strong&gt;我们台湾这些年&lt;/strong&gt;&lt;/a&gt;. 廖信忠&lt;br&gt;一个个小人物的故事构成了台湾社会发展的方方面面，一本书或许不能帮助我们认识了解这个宝岛的过往，但是可以带给一个我们更真切的台湾。&lt;/p&gt;</summary>
    
    
    
    <category term="碎碎念" scheme="https://blog.dlzhang.com/overview/life/"/>
    
    
    <category term="清单" scheme="https://blog.dlzhang.com/overview/tags/%E6%B8%85%E5%8D%95/"/>
    
    <category term="阅读" scheme="https://blog.dlzhang.com/overview/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Typecho 博客搭建尝试</title>
    <link href="https://blog.dlzhang.com/posts/50/"/>
    <id>https://blog.dlzhang.com/posts/50/</id>
    <published>2020-04-30T09:00:00.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>拥有一台自己的服务器之后就尝试搞一个动态博客了，毕竟有后台管理会方便很多。看到 Typecho 原生支持 Markdown，而且有一个很漂亮、功能强大的主题 Handsome，就决定尝试将我的 Hexo 博客迁移到 Typecho  Handsome 了。（20201027更新：感觉还是喜欢 Hexo 的博客，就转回去了，期间半年的评论数据大概有四五十条记录，似乎没有特别的价值就懒得从 Typecho 那边转到 Valine 评论里面了。）<a id="more"></a></p><h2 id="1-Typecho-的个性化"><a href="#1-Typecho-的个性化" class="headerlink" title="1. Typecho 的个性化"></a>1. Typecho 的个性化</h2><h3 id="1-1-自定义样式"><a href="#1-1-自定义样式" class="headerlink" title="1.1 自定义样式"></a>1.1 自定义样式</h3><p>主要的自定义工作我都通过加入自定义 CSS 和 JS 文件来完成了，具体代码可以参考我的 GitHub 项目 <a href="https://github.com/lei2rock/Typecho-Assets">Typecho-Assets</a> 和 <a href="https://github.com/lei2rock/Typecho-Plugin-BanbanStyle">BanbanStyle 插件</a>。其中包含了比如随机彩色标签云、中英文字符件自动添加空格（pangu.js）、macOS 风格代码框、今日诗词、看板娘组件等等。</p><p>有几个样式或功能还需要一点点额外的配置：</p><ul><li><strong>删除首页中间标题</strong>：<code>/usr/themes/handsome/index.php</code> 删除以下代码</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 class=&quot;m-n font-thin text-black l-h&quot;&gt;&lt;?php $this-&gt;options-&gt;title(); ?&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>添加今日诗词布局</strong>（需要配合 JS 文件加载今日诗词 SDK）：在上述标签下方找到以下代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;加载中……&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  $.ajax(&#123;</span></span><br><span class="line"><span class="string">    type: \&#x27;Get\&#x27;,</span></span><br><span class="line"><span class="string">    url: \&#x27;https://v1.hitokoto.cn/\&#x27;,</span></span><br><span class="line"><span class="string">    success: function(data) &#123;</span></span><br><span class="line"><span class="string">      var hitokoto = data.hitokoto;</span></span><br><span class="line"><span class="string">      $(\&#x27;.indexWords\&#x27;).text(hitokoto);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>替换为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;poem-wrap&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;span id=&quot;poem_sentence&quot;&gt;正在加载今日诗词....&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>文章结尾显示标签</strong>：<code>/usr/themes/handsomepost.php</code> 打赏模块结尾添加以下代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--生成当前文章标签--&gt;</span><br><span class="line">&lt;div id=&quot;tag_cloud-2&quot; class=&quot;post-tags tags l-h-2x&quot; style=&quot;text-align:center;margin-top:5px;&quot;&gt;</span><br><span class="line">  &lt;style&gt;.post-tags a&#123;font-size:<span class="number">12</span>px!important;color:<span class="comment">#fff!important;&#125;&lt;/style&gt;</span></span><br><span class="line">  <span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;tags(<span class="string">&#x27; &#x27;</span>, <span class="literal">true</span>, <span class="string">&#x27;暂无标签&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>页脚更改</strong>：<code>/usr/themes/handsome/component/footer.php</code> 第 5-13 行代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrapper bg-light&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;pull-right hidden-xs text-ellipsis&quot;&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;options-&gt;BottomInfo(); <span class="meta">?&gt;</span></span><br><span class="line">    Powered by &lt;a target=<span class="string">&quot;_blank&quot;</span> href=<span class="string">&quot;http://www.typecho.org&quot;</span>&gt;Typecho&lt;/a&gt;&amp;nbsp;|&amp;nbsp;Theme by &lt;a target=<span class="string">&quot;_blank&quot;</span></span><br><span class="line"> href=<span class="string">&quot;https://www.ihewro.com/archives/489/&quot;</span>&gt;handsome&lt;/a&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;text-ellipsis&quot;&gt;</span><br><span class="line">    &amp;copy;&amp;nbsp;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> date(<span class="string">&quot;Y&quot;</span>);<span class="meta">?&gt;</span> Copyright&amp;nbsp;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;options-&gt;BottomleftInfo(); <span class="meta">?&gt;</span></span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrapper bg-light&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;pull-right hidden-xs text-ellipsis&quot;&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;options-&gt;BottomInfo(); <span class="meta">?&gt;</span></span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;text-ellipsis&quot;&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;options-&gt;BottomleftInfo(); <span class="meta">?&gt;</span></span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后就可以直接在主题的「开发者设置」里添加需要的内容了，不会受到原本页脚内容的局限。</p><ul><li><strong>自定义翻译</strong>：修改 <code>/usr/themes/handsome/lang/</code> 文件夹的内容。</li></ul><h3 id="1-2-PJAX-回调函数"><a href="#1-2-PJAX-回调函数" class="headerlink" title="1.2 PJAX 回调函数"></a>1.2 PJAX 回调函数</h3><p>如果开启了 PJAX，一些每次刷新页面都要执行的脚本需要加入回调。目前我根据自定义的 JS 文件设置了以下回调函数。其中最后一条是因为开启了图片延迟加载后，相册页缩略图无法显示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pangu.js</span></span><br><span class="line">pangu.spacingPage();</span><br><span class="line"></span><br><span class="line"><span class="comment">// colorful tag cloud</span></span><br><span class="line">colorful_tags();</span><br><span class="line"></span><br><span class="line"><span class="comment">// macOS 代码框</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> Prism !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    Prism.highlightAll(<span class="literal">true</span>,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 今日诗词</span></span><br><span class="line"><span class="keyword">if</span> ($(<span class="string">&quot;div&quot;</span>).hasClass(<span class="string">&quot;poem-wrap&quot;</span>)) &#123;</span><br><span class="line">    get_poem()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相册缩略图</span></span><br><span class="line">$(<span class="string">&quot;.album-thumb img&quot;</span>).lazyload(&#123;</span><br><span class="line">    effect: <span class="string">&quot;fadeIn&quot;</span>,</span><br><span class="line">    threshold: <span class="string">&quot;200&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-3-FancyBox-缩略图"><a href="#1-3-FancyBox-缩略图" class="headerlink" title="1.3 FancyBox 缩略图"></a>1.3 FancyBox 缩略图</h3><p>就如在用 Hexo 时候进行的修改一样，我希望在使用 FancyBox 时候预览的缩略图是小图，点开后可以加载原图，这样就需要修改 <code>/usr/themes/handsome/assets/js/core.min.js</code> 文件。因为是经过压缩后的版本，所以先恢复回有缩进的版本，然后修改 <code>seFancyBox</code> 函数的定义。</p><p>找到 <code>seFancyBox</code> 函数最后一句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j += i, <span class="string">&quot;undefined&quot;</span> !== f ? b.prop(<span class="string">&quot;outerHTML&quot;</span>, <span class="string">&#x27;&lt;a class=&quot;light-link img-blur&quot; data-fancybox=&quot;gallery&quot; style=&quot;background-image: url(&#x27;</span> + g + <span class="string">&#x27;)&quot; no-pjax data-type=&quot;image&quot; data-caption=&quot;&#x27;</span> + c + <span class="string">&#x27;&quot; href=&quot;&#x27;</span> + g + <span class="string">&#x27;&quot;&gt;&#x27;</span> + j + <span class="string">&quot;&lt;/a&gt;&quot;</span>) : b.prop(<span class="string">&quot;outerHTML&quot;</span>, <span class="string">&#x27;&lt;a class=&quot;light-link&quot; data-fancybox=&quot;gallery&quot; no-pjax data-type=&quot;image&quot; data-caption=&quot;&#x27;</span> + c + <span class="string">&#x27;&quot; href=&quot;&#x27;</span> + g + <span class="string">&#x27;&quot;&gt;&#x27;</span> + j + <span class="string">&quot;&lt;/a&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这一句之前添加（以适配我自己设置的腾讯云对象存储剪裁后缀，如 <code>!500x</code>）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g = g.replace(<span class="regexp">/![0-9]&#123;3,&#125;x/</span>,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后再对 <code>core.min.js</code> 文件进行压缩保存即可。</p><h2 id="2-Valine-评论迁移到-Typecho"><a href="#2-Valine-评论迁移到-Typecho" class="headerlink" title="2. Valine 评论迁移到 Typecho"></a>2. Valine 评论迁移到 Typecho</h2><p>之前是使用 Valine 搭配 LeanCloud 的评论系统，要迁移到 Typecho 还是蛮复杂的，毕竟没有现成的工具，而且评论的 id 和文章的 id 与 Typecho 格式也不一致。目前是参考一个 <a href="https://veltlion.github.io/valine-to-wxr/">Valine 转 Wordpress 评论的脚本</a>，自己修改了代码。脚本需要先安装 <code>jq</code> 这个 JSON 文件处理包，然后可以实现 JSON 转为 SQL 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># by @lei2rock</span></span><br><span class="line"><span class="comment"># Valine to Typecho</span></span><br><span class="line"><span class="comment"># 2020-04-22</span></span><br><span class="line"></span><br><span class="line">comfile=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br><span class="line">line=$(grep comment <span class="variable">$comfile</span> |wc -l)</span><br><span class="line">author_mail=<span class="string">&quot;这里填写自己的邮箱地址&quot;</span></span><br><span class="line">author_url=<span class="string">&quot;这里填写自己的博客链接&quot;</span></span><br><span class="line"><span class="comment">#author_ip=&quot;这里填写自己的ip&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">comment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> ((i=0; i&lt;<span class="variable">$line</span>; i++)); <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">let</span> j=<span class="variable">$i</span>+1</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;第 <span class="variable">$j</span> 条评论\n&quot;</span></span><br><span class="line">        coid=$(jq -r <span class="string">&quot;.results[<span class="variable">$i</span>].objectId&quot;</span> <span class="variable">$comfile</span>)</span><br><span class="line">        cid=$(jq -r <span class="string">&quot;.results[<span class="variable">$i</span>].url&quot;</span> <span class="variable">$comfile</span>)</span><br><span class="line">        cid=<span class="string">&#x27;[&#x27;</span><span class="variable">$cid</span><span class="string">&#x27;]&#x27;</span></span><br><span class="line">        author=$(jq -r <span class="string">&quot;.results[<span class="variable">$i</span>].nick&quot;</span> <span class="variable">$comfile</span>)</span><br><span class="line">        mail=$(jq -r <span class="string">&quot;.results[<span class="variable">$i</span>].mail&quot;</span> <span class="variable">$comfile</span>)</span><br><span class="line">        url=$(jq -r <span class="string">&quot;.results[<span class="variable">$i</span>].link&quot;</span> <span class="variable">$comfile</span> | sed <span class="string">&#x27;s/^null$//&#x27;</span>)</span><br><span class="line">        ip=$(jq -r <span class="string">&quot;.results[<span class="variable">$i</span>].ip&quot;</span> <span class="variable">$comfile</span> | sed <span class="string">&#x27;s/^null$//&#x27;</span>)</span><br><span class="line">        dateYMD=$(jq -r <span class="string">&quot;.results[<span class="variable">$i</span>].createdAt&quot;</span> <span class="variable">$comfile</span> | sed <span class="string">&#x27;s/T/ /; s/\.[0-9]\&#123;3\&#125;Z//&#x27;</span>)</span><br><span class="line">        date=$(date -d <span class="string">&quot;<span class="variable">$dateYMD</span>&quot;</span> +%s)</span><br><span class="line">        parent=$(jq -r <span class="string">&quot;.results[<span class="variable">$i</span>].rid&quot;</span> <span class="variable">$comfile</span> | sed <span class="string">&#x27;s/^null$/0/&#x27;</span>)</span><br><span class="line">        text=$(jq -r <span class="string">&quot;.results[<span class="variable">$i</span>].comment&quot;</span> <span class="variable">$comfile</span>)</span><br><span class="line">        agent=$(jq -r <span class="string">&quot;.results[<span class="variable">$i</span>].ua&quot;</span> <span class="variable">$comfile</span>)</span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$mail</span> == <span class="variable">$author_mail</span> ]]; <span class="keyword">then</span></span><br><span class="line">            authorId=1</span><br><span class="line">            ownerId=1</span><br><span class="line">            url=<span class="variable">$author_url</span></span><br><span class="line"><span class="comment">#           ip=$author_ip</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            authorId=0</span><br><span class="line">            ownerId=0</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$j</span> == <span class="variable">$line</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span>  <span class="string">&quot;(<span class="variable">$coid</span>, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$cid</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, <span class="variable">$date</span>, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$author</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, <span class="variable">$authorId</span>, <span class="variable">$ownerId</span>, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$mail</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$url</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$ip</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$agent</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$text</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;comment&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;approved&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, <span class="variable">$parent</span>);&quot;</span>&gt;&gt;<span class="variable">$comfile</span>.sql</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span>  <span class="string">&quot;(<span class="variable">$coid</span>, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$cid</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, <span class="variable">$date</span>, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$author</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, <span class="variable">$authorId</span>, <span class="variable">$ownerId</span>, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$mail</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$url</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$ip</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$agent</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;<span class="variable">$text</span>&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;comment&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;approved&quot;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&quot;, <span class="variable">$parent</span>),&quot;</span>&gt;&gt;<span class="variable">$comfile</span>.sql</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">touch <span class="variable">$comfile</span>.sql</span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;INSERT INTO \`typecho_comments\` (\`coid\`, \`cid\`, \`created\`, \`author\`, \`authorId\`, \`ownerId\`, \`mail\`, \`url\`, \`ip\`, \`agent\`, \`text\`, \`type\`, \`status\`, \`parent\`) VALUES&quot;</span>&gt;&gt;<span class="variable">$comfile</span>.sql</span><br><span class="line">comment</span><br><span class="line"><span class="built_in">echo</span> <span class="keyword">done</span>!</span><br></pre></td></tr></table></figure><p>保存该文件命名为 <code>valine2typecho.sh</code>，重命名 LeanCloud 导出的 Valine 评论文件为 <code>comment.json</code>，然后在这两个文件所在目录执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh valine2typecho.sh comment.json</span><br></pre></td></tr></table></figure><p>之后可能需要一些手工调整（所以评论数少的话可以用）：例如调整评论的 <code>coid</code>、文章的 <code>cid</code>，修正一些 SQL 可能不支持的格式（比如部分字符要转义），一些 html 标签要在后台评论设置中添加支持，修改部分评论的 <code>parent</code> 值以匹配相应上级评论等等，具体可以参考 MySQL 导出的数据库文件格式。</p><p>导入评论后文章统计的评论数量可能不准确，可以先备份数据库，然后数据库中执行以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> typecho_contents t1 <span class="keyword">SET</span> t1.commentsNum = (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> typecho_comments t2 <span class="keyword">where</span> t2.cid = t1.cid)</span><br></pre></td></tr></table></figure><h2 id="3-插件介绍"><a href="#3-插件介绍" class="headerlink" title="3. 插件介绍"></a>3. 插件介绍</h2><p>介绍一下自己在用的插件，也推荐了一些其他不错的插件，都是在 GitHub 上开源免费的插件。</p><h3 id="3-1-在使用的插件"><a href="#3-1-在使用的插件" class="headerlink" title="3.1 在使用的插件"></a>3.1 在使用的插件</h3><table><thead><tr><th>插件</th><th>介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/lei2rock/Typecho-Plugin-BanbanStyle">BanbanStyle</a></td><td>为我自己的博客设置而开发的插件，功能见 GitHub 项目介绍</td></tr><tr><td><a href="https://github.com/JoyChou93/CommentToMail">CommentToMail</a></td><td>评论邮件通知，可以参考我的邮件模板：<a href="https://github.com/lei2rock/Typecho-Assets/plugins/CommentToMail/owner.html">通知博主</a>、<a href="https://github.com/lei2rock/Typecho-Assets/plugins/CommentToMail/guest.html">通知访客</a></td></tr><tr><td>Handsome</td><td>Handsome 主题配套插件</td></tr><tr><td><a href="https://github.com/bayunjiang/typecho-sitemap">Sitemap</a></td><td>自动生成网站地图</td></tr><tr><td><a href="https://github.com/dishcheng/cosUploadV5">cosUploadV5</a></td><td>上传文件、图片到腾讯云对象存储并提供链接</td></tr><tr><td><a href="https://github.com/lei2rock/Typecho-Plugin-MemorialDay">MemorialDay</a></td><td>自己开发的哀悼日开启全站黑白滤镜</td></tr></tbody></table><h3 id="3-2-其他推荐的插件"><a href="#3-2-其他推荐的插件" class="headerlink" title="3.2 其他推荐的插件"></a>3.2 其他推荐的插件</h3><table><thead><tr><th>插件</th><th>介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/YianAndCode/Comment2Wechat">Comment2Wechat</a></td><td>评论推送至微信，依托 Server 酱实现</td></tr><tr><td><a href="https://github.com/MoeLoli/Comment2Telegram">Comment2Telegram</a></td><td>评论推送至 Telegram，支持回复评论、通过评论、垃圾评论和删除评论</td></tr><tr><td><a href="https://github.com/lei2rock/Typecho-Plugin-macOScode">macOScode</a></td><td>自己开发的实现 macOS 风格代码框，应该只适配 Handsome 主题</td></tr><tr><td><a href="https://github.com/DT27/EditorMD">EditorMD</a></td><td>比原生更好用的 Markdown 编辑器（可以只使用编辑器功能）</td></tr></tbody></table><h2 id="4-Handsome-主题时光机"><a href="#4-Handsome-主题时光机" class="headerlink" title="4. Handsome 主题时光机"></a>4. Handsome 主题时光机</h2><p>Handsome 主题内置了一个「时光机」功能，可以类似微博、微信朋友圈一样发布动态，而且支持通过微信公众号、Chrome 插件等多平台发布。同时，还可以在该页面上利用 RSS 订阅源把自己的微博和 Twitter 等平台的动态同步显示。</p><h3 id="4-1-多平台发布动态"><a href="#4-1-多平台发布动态" class="headerlink" title="4.1 多平台发布动态"></a>4.1 多平台发布动态</h3><p>Handsome 开发者提供了一个微信公众号发布的渠道，但是这样需要用到别人的服务，而且后期如果要添加新的网站等都需要在该平台修改，不是很方便。既然有自己的服务器，还有自己的微信公众号，那就不如自己搭建一个。</p><ol><li><p>首先下载 <a href="https://github.com/iLay1678/wechat_for_handsome">wechat_for_handsome</a> 项目到自己服务器目录，我们可以添加一个新的网站和域名来部署，同时需要创建一个对应的数据库。</p></li><li><p>在安装该服务前，我们需要先去微信公众号后台获取必要的设置参数。在微信公众号后台「开发-基本配置」处获取 AppID 和 AppSecret。然后我们参照微信公众号的<a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html">文档</a>，使用刚才获得的两个参数在 <a href="https://mp.weixin.qq.com/debug/cgi-bin/apiinfo?t=index&type=%E5%9F%BA%E7%A1%80%E6%94%AF%E6%8C%81&form=%E8%8E%B7%E5%8F%96access_token%E6%8E%A5%E5%8F%A3%20/token">微信公众平台接口调试工具</a> 获取 <code>access_token</code>。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/04/wechat-channel-server.jpg!600x" alt="服务器配置"></p></li><li><p>接下来回到微信公众号后台「开发-基本配置」处启用服务器配置。服务器地址（URL）填写为「项目域名/server.php」；令牌（Token）就是第二步得到的 <code>access_token</code>；消息加解密密钥（EncodingAESKey）可以随机生成但是一定要记录，因为我们还需要在项目安装时候填写；消息加解密方式可以选择「安全模式」。因为还没有在服务器上安装，所以先不要提交，放一边，进入下一步。</p></li><li><p>回到之前添加的站点，访问「项目域名/install.php」进入安装步骤。依次输入要求的几个参数，这些我们都通过上面的几个步骤获得了，设置完毕后安装即可。这样就可以回到第三步的公众号服务器配置，提交验证。</p></li><li><p>然后向公众号发送「绑定」，点击链接填写相关信息进行绑定，绑定完毕就可以参考主题文档的说明发布动态了。如果没有反应，可能是刚刚验证完毕，稍微等一会儿就好。其中，时光机的 <code>cid</code> 可以在后台独立页面管理处获得，验证编码可以在主题设置处自行设置一个当作访问密码。</p></li><li><p>如果公众号启用了「服务器配置」后，自定义的菜单不见了，可以在功能插件设置处重新启用即可。Chrome 扩展发布动态的方法可以直接参考主题文档配置。</p></li></ol><h3 id="4-2-添加-RSS-订阅源"><a href="#4-2-添加-RSS-订阅源" class="headerlink" title="4.2 添加 RSS 订阅源"></a>4.2 添加 RSS 订阅源</h3><p>时光机上要显示自己的微博或者 Twitter 的动态，可以借助 RSSHub 生成的订阅源。RSSHub 的部署可以参考我之前的文章，其中 Twitter 还需要去申请获得 API 相应的 key 才可以访问。</p><p>当然，使用的时候不能直接填写这个订阅源，因为会被禁止跨域访问，这时候可以在该订阅源链接前面加上 <code>https://cors-anywhere.herokuapp.com/</code>。例如我们要订阅微博的 RSS 订阅源链接是 <code>https://rsshub.app/weibo/user/&#123;weibo_user_id&#125;</code>，那么为了方便跨域访问，可以在时光机设置时候填写:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://cors-anywhere.herokuapp.com/https://rsshub.app/weibo/user/&#123;weibo_user_id&#125;</span></span><br></pre></td></tr></table></figure><p>当然，可能通过访问 herokuapp.com 来获取订阅源速度比较慢，那就可以自行部署这个 <a href="https://github.com/Rob--W/cors-anywhere">CORS Anywhere 服务</a>。方法也很简单，以使用宝塔面板为例，因为部署该项目使用的是 Nodejs 环境，需要先安装 Nodejs，方法可以参考我之前的文章。</p><p>然后下载上述项目源码到需要部署的服务器目录，项目根目录下创建环境变量设置文件 <code>.env</code>，编辑文件添加环境变量（具体含义用法见该项目文档），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PORT &#x3D; 1400</span><br><span class="line">CORSANYWHERE_WHITELIST &#x3D; https:&#x2F;&#x2F;blog.dlzhang.com,https:&#x2F;&#x2F;rss.zdl.one</span><br></pre></td></tr></table></figure><p>之后安装所需要的依赖（以下命令二选一）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yarn 安装方式</span></span><br><span class="line">yarn</span><br><span class="line">yarn add dotenv # 调用环境变量文件需要的依赖</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> npm 安装方式</span></span><br><span class="line">npm install</span><br><span class="line">npm install dotenv --save # 调用环境变量文件需要的依赖</span><br></pre></td></tr></table></figure><p>修改启动文件 <code>server.js</code>，在最开头加入以下内容，以便在最开始就引入环境变量文件的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import .env</span></span><br><span class="line"><span class="keyword">let</span> dotenv = <span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>);</span><br><span class="line">dotenv.config(<span class="string">&#x27;./env&#x27;</span>);</span><br></pre></td></tr></table></figure><p>可以手动启动，或者用「PM2 管理器」启动，选择启动文件为 <code>server.js</code> 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>最后，为服务设置反向代理，使得可以通过域名访问该服务。</p><h2 id="5-访问速度与安全"><a href="#5-访问速度与安全" class="headerlink" title="5. 访问速度与安全"></a>5. 访问速度与安全</h2><h3 id="5-1-CDN"><a href="#5-1-CDN" class="headerlink" title="5.1 CDN"></a>5.1 CDN</h3><p>最开始是静态资源走腾讯云境内 CDN（存储在对象存储中），毕竟腾讯云每个月有 10G 免费境内 CDN 流量包可以使用。但是测试和实际使用发现，如果只是使用境内 CDN 分发静态资源，海外访问的时候会有「云减速」的效果，但是如果开启全球加速，海外访问的流量费也是一笔钱。</p><p>而如果选择 Cloudflare 的 CDN，似乎对境内访问有「云减速」的效果。如果是 DNS 双线解析，境内直接访问服务器，境外访问 Cloudflare 的 CDN（可以通过 Cloudflare Partner 面板实现 CNAME 接入）， 可以让海外访问走 CDN，不过感觉对境内一样是源站访问的话用 CDN 意义不算很大。而且，因为目前服务器和我同地域，访问延迟特别低，体验很好，加上 Cloudflare 的 CDN，纵使是境外也感觉有「云减速」的效果，似乎没有给我选择最近的节点或者是回源获取资源了吧。</p><p>反正经过几番尝试，最后还是只选择了主题的静态文件直接放到 GitHub，借助 jsDelivr 的 CDN 进行分发。自定义的静态文件也放到了 GitHub，但主要是版本控制的目的，毕竟 jsDelivr 的 CDN 缓存刷新速度不是那么快的。我采用 GitHub Actions 同步到腾讯云对象存储中，直接用对象存储的链接进行访问，感觉这样并没有比采用加速域名走 CDN 慢。</p><p>目前没有用 memcached 或者 redis 作内容缓存，其一是并没有很大的并发需求，其二是 Typecho 没有好用的插件（或多或少有一些问题）。</p><h3 id="5-2-Google-BBR"><a href="#5-2-Google-BBR" class="headerlink" title="5.2 Google BBR"></a>5.2 Google BBR</h3><p>Google BBR 是一个 TCP 加速优化工具，可用于优化TCP连接，根据介绍开启可以加快访问的网速，这里参考了 <a href="https://www.moerats.com/archives/297/">Rat 介绍的方法</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改系统变量</span></span><br><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存生效开启 BBR</span></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看内核是否已开启 BBR</span></span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 BBR 是否启动</span></span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>显示以下即内核已开启 BBR：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sysctl net.ipv4.tcp_available_congestion_control</span></span><br><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br></pre></td></tr></table></figure><p>显示类似以下内容即 BBR 启动成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> lsmod | grep bbr</span></span><br><span class="line">tcp_bbr                20480  14</span><br></pre></td></tr></table></figure><h3 id="5-3-TLS-与-HSTS"><a href="#5-3-TLS-与-HSTS" class="headerlink" title="5.3 TLS 与 HSTS"></a>5.3 TLS 与 HSTS</h3><p>宝塔面板安装最新版本，Nginx 安装 1.17 版本的话，应该已经支持了 TLS 1.3 协议，可以在 <a href="https://www.ssllabs.com/ssltest/">ssllabs.com</a> 或者 <a href="https://myssl.com/">myssl.com</a> 测试一下自己的站点。为了在上述测试中实现 A 的评级，获得 SSL 证书后，我还在 Nginx 中禁用了 TLS 1.1 协议：删除服务器所有网站 Nginx 配置文件中的 <code>TLSv1.1</code>。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span></span><br><span class="line"><span class="addition">+ssl_protocols TLSv1.2 TLSv1.3;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;拥有一台自己的服务器之后就尝试搞一个动态博客了，毕竟有后台管理会方便很多。看到 Typecho 原生支持 Markdown，而且有一个很漂亮、功能强大的主题 Handsome，就决定尝试将我的 Hexo 博客迁移到 Typecho  Handsome 了。（20201027更新：感觉还是喜欢 Hexo 的博客，就转回去了，期间半年的评论数据大概有四五十条记录，似乎没有特别的价值就懒得从 Typecho 那边转到 Valine 评论里面了。）</summary>
    
    
    
    <category term="科技树" scheme="https://blog.dlzhang.com/overview/tech/"/>
    
    
    <category term="服务器" scheme="https://blog.dlzhang.com/overview/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="Typecho" scheme="https://blog.dlzhang.com/overview/tags/Typecho/"/>
    
  </entry>
  
  <entry>
    <title>宝塔面板部署 RSSHub 和自动签到 Docker 应用</title>
    <link href="https://blog.dlzhang.com/posts/49/"/>
    <id>https://blog.dlzhang.com/posts/49/</id>
    <published>2020-04-15T15:30:50.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>使用宝塔面板下部署 Docker 应用还是挺容易的，首先需要安装 Docker 管理器。不过这个管理器在 Safari 浏览器中似乎有 bug，无法进行点击操作，但是在 Chrome 浏览器中可以正常操作。本文将通过这个 Docker 管理器来安装 RSSHub 这一 RSS 生成器和一个自动签到应用。<a id="more"></a></p><h2 id="1-RSSHub：万物皆可-RSS"><a href="#1-RSSHub：万物皆可-RSS" class="headerlink" title="1. RSSHub：万物皆可 RSS"></a>1. RSSHub：万物皆可 RSS</h2><p>因为有些网站或者媒体没有主动提供 RSS 订阅链接，所以我们就可以依靠 RSSHub 这一个开源、简单易用、易于扩展的 RSS 生成器，给任何奇奇怪怪的内容生成 RSS 订阅源。</p><h3 id="1-1-Docker-部署"><a href="#1-1-Docker-部署" class="headerlink" title="1.1 Docker 部署"></a>1.1 Docker 部署</h3><p>首先，打开 Docker 管理器，在「镜像管理」中获取官方库镜像 <code>diygod/rsshub</code>。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/04/docker_mirror.jpg!500x" alt="获取镜像"></p><p>然后，在「容器列表」创建新的 Docker 容器：</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/04/rsshub_docker.jpg!400x" alt="创建 RSSHub 容器"></p><p>这里我们设置了：</p><ul><li>容器端口 1200 映射到服务器端口 1200；</li><li>服务器目录 <code>/www/wwwroot/rsshub/</code> 可以读写容器目录 <code>/usr/src/app/</code>；</li><li>CPU 权重改为 30。</li></ul><p>然后，我们创建一个新的网站，不需要创建新的数据库，PHP 设置为纯静态。把文章根目录下的文件都清空，然后把 RSSHub 源代码拉取到网站根目录 <code>/www/wwwroot/rsshub/</code>。这样的目的是以后有需要，可以直接修改该目录下的文件，而不需要进入 Docker 容器进行修改。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /www/wwwroot/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/diygod/rsshub.git rsshub</span><br></pre></td></tr></table></figure><p>最后，设置反向代理，以便我们可以通过域名来访问该服务：</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/04/reverse_proxy.jpg!500x" alt="反向代理"></p><p>这样，我们的 RSSHub 就完成了搭建，具体的配置和路由可以参见 <a href="https://docs.rsshub.app/">RSSHub 文档</a>。</p><h3 id="1-2-Docker-Compose-部署"><a href="#1-2-Docker-Compose-部署" class="headerlink" title="1.2 Docker Compose 部署"></a>1.2 Docker Compose 部署</h3><p>当然，我们也可以通过 Docker Compose 部署 RSSHub，部署步骤很简单，直接参考 RSSHub 文章介绍即可。部署完毕后也会显示在上面提及的 Docker 管理器中。</p><p>当然首先需要先安装  Docker Compose，参照<a href="https://docs.docker.com/compose/install/">文档说明</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载 Docker Compose 稳定发布版</span></span><br><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置访问权限</span></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看安装版本</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>接下来安装RSSHub：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载 docker-compose.yml</span></span><br><span class="line">wget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 volume 持久化 Redis 缓存</span></span><br><span class="line">docker volume create redis-data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 Docker</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新：先执行以下命令删除旧容器，然后重复上述安装步骤</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p>如果要添加配置，可以修改 <a href="https://github.com/DIYgod/RSSHub/blob/master/docker-compose.yml">docker-compose.yml</a> 中的 <code>environment</code> 进行配置。</p><h2 id="2-自动签到应用"><a href="#2-自动签到应用" class="headerlink" title="2. 自动签到应用"></a>2. 自动签到应用</h2><p><a href="https://qiandao.today/">qiandao.today</a> 这个网站提供了自动签到的服务，上面提供了许多网站自动签到的模板。我们也可以利用公开的源代码自己搭建一个这样的自动签到应用。</p><h3 id="2-1-部署容器"><a href="#2-1-部署容器" class="headerlink" title="2.1 部署容器"></a>2.1 部署容器</h3><p>这里采用 Docker Compose 部署的方法，比较方便快捷。首先创建一个 <code>docker-compose.yml</code>（目录任意，为方便管理可以放在站点的目录下）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">qiandao:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">fangzhengjin/qiandao</span> <span class="comment">#容器镜像</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">qiandao</span> <span class="comment">#设置容器名称</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span> <span class="comment">#表示重启 docker 后自动重启该容器</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;1300:80&#x27;</span> <span class="comment">#表示容器的 80 端口映射到服务器的 1300 端口</span></span><br></pre></td></tr></table></figure><p>该目录下执行以下命令可以：启动、停止、移除容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止（不需要在该目录下执行）</span></span><br><span class="line">docker stop qiandao</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p>接下来我们按照前面介绍的方法设置反向代理，这样就可以访问之前设置的域名注册账号，再把该账号设置为管理员：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器管理（也可通过宝塔面板 Docker 管理器进入）</span></span><br><span class="line">docker exec -it qiandao /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置站点管理员（邮箱需要已注册）</span></span><br><span class="line">python ./chrole.py admin@example.com admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出容器管理</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="2-2-获取-Cookies"><a href="#2-2-获取-Cookies" class="headerlink" title="2.2 获取 Cookies"></a>2.2 获取 Cookies</h3><p>签到模板可以从 <a href="https://qiandao.today/">qiandao.today</a> 下载，具体使用方法可以查阅官方文档。对于需要获取 Cookies 进行签到的网站，我们可以安装 Chrome 扩展应用 <a href="https://chrome.google.com/webstore/detail/cookies-get-assistant/ljjpkibacifkfolehlgaolibbnlapkme">GetCookies</a>。但是，这里下载安装的只限用于 qiandao.today 这个网站。如果我们要在自己搭建的签到网站获取 Cookies，可以：</p><ul><li>从 GitHub 下载<a href="https://github.com/acgotaku/GetCookies">该项目的源代码</a>；</li><li>全局搜索 <code>qiandao.today</code>，替换为自己的签到网站域名并保存；</li><li>在 Chrome 浏览器的扩展程序管理页面（chrome://extensions），选择「加载已解压的扩展程序」，将刚才已经编辑过的扩展程序文件夹上传安装即可。</li></ul><h3 id="2-3-配置与备份数据"><a href="#2-3-配置与备份数据" class="headerlink" title="2.3 配置与备份数据"></a>2.3 配置与备份数据</h3><p>如果不希望别人访问我们的签到网站注册账号，可以把 <code>/web/handlers/login.py</code> 文件第 66-130 行的代码注释掉（前后均写上 <code>&#39;&#39;&#39;</code>）。编辑好该文件后，在该文件目录执行以下命令把文件复制到容器内：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 把文件复制到容器内</span></span><br><span class="line">docker cp login.py qiandao:/usr/src/app/web/handlers/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启容器</span></span><br><span class="line">docker restart qiandao</span><br></pre></td></tr></table></figure><p>要备份我们的数据信息，可以执行如下命令，建议恢复数据库后立即重启容器（方法同上）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将容器中的数据库文件复制到当前目录</span></span><br><span class="line">docker cp qiandao:/usr/src/app/database.db .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将备份的数据库复制到容器中（当前目录的 database.db 文件）</span></span><br><span class="line">docker cp database.db qiandao:/usr/src/app/</span><br></pre></td></tr></table></figure><p>调整相关配置，可以修改 <code>config.py</code> 文件，复制到容器方法和备份数据库文件到方法一样。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用宝塔面板下部署 Docker 应用还是挺容易的，首先需要安装 Docker 管理器。不过这个管理器在 Safari 浏览器中似乎有 bug，无法进行点击操作，但是在 Chrome 浏览器中可以正常操作。本文将通过这个 Docker 管理器来安装 RSSHub 这一 RSS 生成器和一个自动签到应用。</summary>
    
    
    
    <category term="科技树" scheme="https://blog.dlzhang.com/overview/tech/"/>
    
    
    <category term="服务器" scheme="https://blog.dlzhang.com/overview/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="RSS" scheme="https://blog.dlzhang.com/overview/tags/RSS/"/>
    
    <category term="Docker" scheme="https://blog.dlzhang.com/overview/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>部署 RSS 订阅服务 FreshRSS</title>
    <link href="https://blog.dlzhang.com/posts/48/"/>
    <id>https://blog.dlzhang.com/posts/48/</id>
    <published>2020-04-15T12:30:45.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>RSS 订阅我之前是使用 Inoreader，但是免费版的即使是在 Reeder 客户端下浏览依然是有广告植入的，而且听闻最近在境内已经无法访问了，所以就考虑自建一个。一开始考虑的是 Tiny Tiny RSS，这个之前在腾讯云的学生机上就尝试搭建过。但是订阅源的自动刷新一直搞不定，看了很多教程也没有成功，而且界面设置什么的都不是很喜欢，就放弃了。继续寻找之下找到了 FreshRSS，自带支持 Reeder 客户端访问，不像 Tiny Tiny RSS 还需要安装 fever 插件。<a id="more"></a></p><h2 id="1-安装-FreshRSS"><a href="#1-安装-FreshRSS" class="headerlink" title="1. 安装 FreshRSS"></a>1. 安装 FreshRSS</h2><div class="note info"><p><strong>注意</strong>：需要确认已经安装了 PHP 扩展 fileinfo。如果使用宝塔面板，可以参考我上一篇文章的说明安装该扩展，此外还需要取消禁用两个函数：openlog 和 syslog（不然安装设置过程中会报错）。</p></div><p>接下来在宝塔面板创建新站点，设置好数据库与 PHP 版本（还可以添加上 SSL 证书）：</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/04/create_site.jpg!500x" alt="创建新站点"></p><p>然后，删去网站根目录下默认添加创建的所有文件，确保文件夹全部清空。打开 SSH 终端，把 FreshRSS 源代码拉取到网站根目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /www/wwwroot/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/FreshRSS/FreshRSS.git rss</span><br></pre></td></tr></table></figure><p>接下来，我们需要提升网站根目录下 <code>/data/</code> 文件夹的访问权限，不然安装设置过程中会报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> rss</span><br><span class="line">chmod -R 777 ./data</span><br></pre></td></tr></table></figure><p>接下来我们需要设置一下网站的运行目录，因为根据 FreshRSS 官方文档的说明，推荐只将 <code>/p/</code> 目录公开到网络上：</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/04/site_path.jpg!500x" alt="设置运行目录"></p><p>完成后，访问之前创建网站时设置的域名，就可以进入安装设置程序了。</p><p>先设置好语言，检查完毕没有缺少的组件和权限后，如下图所示设置数据库（用户名、数据库名根据之前创建的信息填写）：</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/04/db_settings.jpg!400x" alt="数据库配置"></p><p>之后就是设置好自己的用户名密码，完成安装就可以进入 FreshRSS 界面进行登录操作了。</p><h2 id="2-客户端访问"><a href="#2-客户端访问" class="headerlink" title="2. 客户端访问"></a>2. 客户端访问</h2><p>要通过 Reeder 等客户端来阅读 RSS 资讯，还需要在设置界面等「认证」中打开「允许 API 访问 」，然后前往「用户帐户」设置好「API 密码」。这样，在 Reeder 客户端添加账号时选择 FreshRSS，然后填写如下：</p><ul><li>Sever：设置「API 密码」时右侧显示的链接地址；</li><li>User：FreshRSS 登录用户名；</li><li>Password：刚才设置的「API 密码」。</li></ul><h2 id="3-自动刷新订阅源"><a href="#3-自动刷新订阅源" class="headerlink" title="3. 自动刷新订阅源"></a>3. 自动刷新订阅源</h2><p>根据官方文档推荐的<a href="https://freshrss.github.io/FreshRSS/en/users/03_Main_view.html#refreshing-feeds">订阅源刷新方案</a>，可以设置 crontab 定时任务如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;5 * * * * php &#x2F;www&#x2F;wwwroot&#x2F;rss&#x2F;app&#x2F;actualize_script.php &gt; &#x2F;tmp&#x2F;FreshRSS.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>其中，<code>/www/wwwroot/rss/</code> 是 FreshRSS 网站的根目录路径，上述任务表示每五分钟刷新一次订阅源。在宝塔面板中设置就很简单，在「计划任务」中添加一个 Shell 脚本定时任务就可以了，脚本内容是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php /www/wwwroot/rss/app/actualize_script.php &gt; /tmp/FreshRSS.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;RSS 订阅我之前是使用 Inoreader，但是免费版的即使是在 Reeder 客户端下浏览依然是有广告植入的，而且听闻最近在境内已经无法访问了，所以就考虑自建一个。一开始考虑的是 Tiny Tiny RSS，这个之前在腾讯云的学生机上就尝试搭建过。但是订阅源的自动刷新一直搞不定，看了很多教程也没有成功，而且界面设置什么的都不是很喜欢，就放弃了。继续寻找之下找到了 FreshRSS，自带支持 Reeder 客户端访问，不像 Tiny Tiny RSS 还需要安装 fever 插件。</summary>
    
    
    
    <category term="科技树" scheme="https://blog.dlzhang.com/overview/tech/"/>
    
    
    <category term="服务器" scheme="https://blog.dlzhang.com/overview/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="Linux" scheme="https://blog.dlzhang.com/overview/tags/Linux/"/>
    
    <category term="RSS" scheme="https://blog.dlzhang.com/overview/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>服务器部署 Hexo 博客和看板娘 Live2D API</title>
    <link href="https://blog.dlzhang.com/posts/47/"/>
    <id>https://blog.dlzhang.com/posts/47/</id>
    <published>2020-04-15T11:45:00.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>在服务器上部署 Hexo 静态博客有两种方案，一是直接把源代码推送到服务器上，然后在服务器上安装 Node.js 和 hexo-cli，从而直接在服务器上构建网页文件并部署；二是依旧按照之前部署到对象存储的方案，用 GitHub 作为源代码托管，然后用 GitHub Actions 构建网页文件，再同步到服务器的网站根目录下。这里，我选择后一种方案，这样修改的地方比较少，也比较方便。<a id="more"></a></p><h2 id="1-通过-GitHub-Actions-部署-Hexo"><a href="#1-通过-GitHub-Actions-部署-Hexo" class="headerlink" title="1. 通过 GitHub Actions 部署 Hexo"></a>1. 通过 GitHub Actions 部署 Hexo</h2><p>首先，修改原来的 GitHub Actions 脚本，删去部署到阿里云 OSS 的内容，添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">server</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">easingthemes/ssh-deploy@v2.1.2</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">ARGS:</span> <span class="string">&quot;-avz --delete&quot;</span></span><br><span class="line">    <span class="attr">SOURCE:</span> <span class="string">&quot;public/&quot;</span> <span class="comment"># 要同步到服务器的目录</span></span><br><span class="line">    <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span> <span class="comment"># 配置在服务器上公钥所对应的私钥</span></span><br><span class="line">    <span class="attr">REMOTE_HOST:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_HOST</span> <span class="string">&#125;&#125;</span> <span class="comment"># 服务器 IP 地址</span></span><br><span class="line">    <span class="attr">REMOTE_PORT:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_PORT</span> <span class="string">&#125;&#125;</span> <span class="comment"># SSH 连接端口</span></span><br><span class="line">    <span class="attr">REMOTE_USER:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_USER</span> <span class="string">&#125;&#125;</span> <span class="comment"># 服务器 SSH 连接用户名，如 root</span></span><br><span class="line">    <span class="attr">TARGET:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_TARGET</span> <span class="string">&#125;&#125;</span> <span class="comment"># 服务器上对应网站的根目录</span></span><br></pre></td></tr></table></figure><p>对于上述变量，我们直接添加在代码仓库设置的 Secrets 中即可。对于阿里云轻量应用服务器，可以在控制台很容易地生成密钥对，并下载由于连接服务器的私钥（生成后重启一下服务器）。</p><p>设置好 GitHub Actions 各项参数之后，需要在宝塔面板上创建网站，并设置域名等内容，这里就不详细介绍。如果需要 Let’s Encrypt SSL 通配符证书，可能还需要进行 DNS 解析认证，这就需要我们去域名解析提供商那边获取一个可以编辑 DNS 解析记录的 token，方便宝塔面板自动配置解析记录。</p><p>最后，因为 GitHub Actions 同步到服务器网站目录过程中用到了 rsync 这一数据镜像备份工具，所以需要先在服务器上安装好 rsync：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install rsync</span><br></pre></td></tr></table></figure><p><strong>备注</strong>：如果服务器提供商的控制台没有自动配置密钥对的功能，可以在服务器上手动生成。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入用户 SSH 密钥存储目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="comment"># 列出目录中内容，确认是否已拥有密钥</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 生成 SSH 密钥</span></span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>首先 <code>ssh-keygen</code> 会确认密钥的存储位置（默认是 <code>.ssh/id_rsa</code>），然后它会要求你输入两次密钥口令。 如果你不想在使用密钥时输入口令，将其留空即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将公钥内容写入 authorized_keys</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line"><span class="comment"># 列出私钥的内容</span></span><br><span class="line">cat ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>最后，我们把私钥的内容复制到 GitHub 代码仓库设置的 Secrets 中 <code>SSH_PRIVATE_KEY</code> 变量内即可。</p><h2 id="2-将萌萌哒看板娘抱回家"><a href="#2-将萌萌哒看板娘抱回家" class="headerlink" title="2. 将萌萌哒看板娘抱回家"></a>2. 将萌萌哒看板娘抱回家</h2><p>看板娘的大致设置都可以参考 <a href="https://github.com/stevenjoezhang/live2d-widget">stevenjoezhang/live2d-widget</a> 这个项目的介绍。这里我主要记录一下使用上述组件时候，需要调用到的看板娘模型 API 的自建过程。</p><p>首先，在宝塔面板创建新站点，设置好 PHP 版本（不能是纯静态），并添加上 SSL 证书。然后，删去网站根目录 <code>/www/wwwroot/api/</code> 下默认添加创建的所有文件，确保文件夹全部清空。打开 SSH 终端，把 Live2D API 源代码拉取到网站 <code>live2d/</code> 目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /www/wwwroot/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/fghrsh/live2d_api.git api/live2d</span><br></pre></td></tr></table></figure><p>然后在网站的配置文件中添加代码设置跨域访问：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> $allow_origin always;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET,POST,OPTIONS&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;Token,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,X_Requested_With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;</span><br><span class="line">    <span class="attribute">if</span> ($request_method = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">map</span> $http_origin $allow_origin &#123;</span><br><span class="line">    <span class="attribute">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &quot;~^(https?://localhost(:[0-9]+)?)&quot; $1;</span><br><span class="line">    &quot;~^(https?://127.0.0.1(:[0-9]+)?)&quot; $1; </span><br><span class="line">    &quot;~^(https?://192.168.10.[\d]+(:[0-9]+)?)&quot; $1;</span><br><span class="line">    &quot;~^(https?://local.zdl.one(:[0-9]+)?)&quot; $1;</span><br><span class="line">    &quot;~^https://dlzhang.com&quot; https://dlzhang.com;</span><br><span class="line">    &quot;~^https://blog.dlzhang.com&quot; https://blog.dlzhang.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我的看板娘组件文件都放在了腾讯云的对象存储中并通过其 CDN 进行访问，所以还需要在腾讯云的内容分发网络中对加速域名也设置好允许相关域名跨域访问的权限。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在服务器上部署 Hexo 静态博客有两种方案，一是直接把源代码推送到服务器上，然后在服务器上安装 Node.js 和 hexo-cli，从而直接在服务器上构建网页文件并部署；二是依旧按照之前部署到对象存储的方案，用 GitHub 作为源代码托管，然后用 GitHub Actions 构建网页文件，再同步到服务器的网站根目录下。这里，我选择后一种方案，这样修改的地方比较少，也比较方便。</summary>
    
    
    
    <category term="科技树" scheme="https://blog.dlzhang.com/overview/tech/"/>
    
    
    <category term="Hexo" scheme="https://blog.dlzhang.com/overview/tags/Hexo/"/>
    
    <category term="GitHub Actions" scheme="https://blog.dlzhang.com/overview/tags/GitHub-Actions/"/>
    
    <category term="服务器" scheme="https://blog.dlzhang.com/overview/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>升级到 Debian 10 并安装宝塔面板</title>
    <link href="https://blog.dlzhang.com/posts/46/"/>
    <id>https://blog.dlzhang.com/posts/46/</id>
    <published>2020-04-15T10:30:37.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>近日入手了一个阿里云的轻量应用服务器，看着价格还比较实惠，就打算把自己的博客也搬过去。服务器买都买了，当然还要折腾一下其他有趣的应用和服务，比如 RSS 订阅、RSSHub、自动签到、Live2D API 等等<del>（其实是为了部署服务才买了服务器，顺带迁移了博客站点）</del>。所以就在这里记录一下搭建的过程，方便日后维护和重装部署。<a id="more"></a></p><h2 id="1-系统升级到-Debian-10"><a href="#1-系统升级到-Debian-10" class="headerlink" title="1. 系统升级到 Debian 10"></a>1. 系统升级到 Debian 10</h2><p>作为代码小白，当然是无脑选择使用宝塔面板。阿里云的控制台可以直接安装宝塔面板，不过因为搭配的系统是 CentOS，感觉不是很习惯，就直接选择了先安装 Debian 9 系统，然后自行升级的方式。</p><p>作为更新强迫症患者中，当然是要先把系统更新到最新版本啦，这里主要参考了<a href="https://niconiconi.fun/2019/06/14/debian-9-upgrade-debian-10/">葉子的操作</a>。升级到 Debian 10 （版本代号 buster）之前请确认你没有添加过奇怪的软件源，或者编译过一些未知的东西，如果有的话请了解一下之前的操作会不会对系统造成损伤，如果有的话不建议升级，容易出问题。因此，如果不是全新系统升级，建议先进行备份。</p><p>因为我的是全新系统，就没有备份环节啦。建议先将本地软件更新到最新版，然后再升级 Debian 不然很有可能会出现一些未知的问题，本次升级基于官方源进行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新软件索引</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="comment"># 更新本地所有软件到最新版</span></span><br><span class="line">sudo apt full-upgrade</span><br><span class="line"><span class="comment"># 切换 stretch 源到 buster 源</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;s/stretch/buster/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 再次更新软件索引</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="comment"># 升级 Debian 9 stretch 到 Debian 10 buster</span></span><br><span class="line">sudo apt upgrade</span><br><span class="line"><span class="comment"># 重启服务器</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>由于是跨版本升级，在第五个命令的升级过程中很多地方需要我们手动设置或确认：</p><ul><li><p>首先需要确认的是 apt， 感兴趣的可以看一下具体参数设置，直接输入 <code>q</code> 进行安装；</p></li><li><p>之后可能会跳出 Configuring kexec-tools，Configuring kdump-tools 和 Configuring libc6:amd64 的确认窗口，这里选择 <code>&lt;Yes&gt;</code>；</p></li><li><p>接下来就和平时更新差不多了，遇到冲突选择 <code>Y or I</code> 使用更新配置，还是 选择 <code>N or O</code> 保留已有配置，或者其他选项。我个人因为是全新安装升级，所以都选择了 <code>Y</code> 使用更新配置。</p></li></ul><h2 id="2-安装宝塔面板"><a href="#2-安装宝塔面板" class="headerlink" title="2. 安装宝塔面板"></a>2. 安装宝塔面板</h2><p>参考宝塔官网给出的安装命令安装宝塔面板：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSO http://download.bt.cn/install/install_panel.sh &amp;&amp; bash install_panel.sh</span><br></pre></td></tr></table></figure><p>安装完毕后就会显示面板的访问路径、默认的登录用户名密码等信息。这里需要注意的是，我们需要先去云服务器的控制台安全组（防火墙）处先把宝塔面板访问的默认端口 8888 放通，要不然是无法访问面板的。</p><p>在浏览器登录宝塔面板后，就会跳出推荐安装套件的窗口。选择 LNMP 套件极速安装，版本上因为我的机器内存只有 1G，所以就选择了 MySQL 5.5 的版本，其他都选择了最新版本。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/04/LNMP.jpg!500x" alt="推荐安装套件"></p><div class="note info"><p><strong>注意</strong>：如果发现下载时无法连接到宝塔的下载地址（特别是境外服务器），可能需要先在首页的「Linux 工具箱」中临时修改一下「DNS 设置」，例如使用 1.1.1.1 或者 8.8.8.8。</p></div><p>安装完推荐套件后，继续在「软件商店」中安装其他需要的软件，我们这里选择安装：</p><ul><li>[运行环境] Docker 管理器：方便后续安装 RSSHub 和自动签到服务；</li><li>[运行环境] PM2 管理器：Nodejs 服务可以通过其管理，如果安装 Nodejs 失败，可以使用 <code>nvm</code> 手动安装，方法参考 <a href="https://github.com/nvm-sh/nvm">nvm-sh/nvm</a> 的说明，可能需要指定好路径才能正确使用（具体可以参考 <a href="https://www.cnblogs.com/weifeng1463/p/11321432.html">解决 nvm command not found 问题的方法</a>）；</li><li>[系统工具] 日志清理工具：可以一键清理指定日志和系统垃圾；</li><li>[插件] 阿里云 OSS：将网站或数据库打包备份到阿里云 OSS 对象存储空间，在阿里云同一地域下的云产品之间还可以通过内网地址连接，既能提高连接速度，也能减少流量费用；</li><li>[第三方应用] Nginx 免费防火墙。</li></ul><p>不过，安装完毕设置阿里云 OSS 参数插件之前，执行以下命令，不然可能无法正常执行备份操作（提示：<code>ImportError: No module named oss2</code>）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install oss2</span><br></pre></td></tr></table></figure><p>对于 PHP，我们可以在「性能调整」中根据自己的内存大小修改并发方案，还可以选择安装以下扩展：</p><ul><li>fileinfo：FreshRSS 需要此扩展</li><li>opcache：开启脚本缓存可以提高 PHP 运行性能</li><li>redis：内容缓存</li></ul><div class="note info"><p><strong>注意</strong>：内存只有 1G 的服务器可能无法安装 fileinfo，这时候需要我们在「Linux 工具箱」的「Swap/虚拟内存」中添加 Swap，我们可以设置如 1024MB 或者 1500MB。</p></div><p>软件安装完毕后，可以进入「面板设置」，修改默认的访问端口、登录用户名密码等信息，还可以为面板绑定访问域名并添加 SSL 证书。</p><p>对于 FTP 工具，本地可以使用 FileZilla 软件，使用方法可以参考宝塔面板的<a href="https://www.bt.cn/bbs/thread-43162-1-1.html">论坛帖子</a>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近日入手了一个阿里云的轻量应用服务器，看着价格还比较实惠，就打算把自己的博客也搬过去。服务器买都买了，当然还要折腾一下其他有趣的应用和服务，比如 RSS 订阅、RSSHub、自动签到、Live2D API 等等&lt;del&gt;（其实是为了部署服务才买了服务器，顺带迁移了博客站点）&lt;/del&gt;。所以就在这里记录一下搭建的过程，方便日后维护和重装部署。</summary>
    
    
    
    <category term="科技树" scheme="https://blog.dlzhang.com/overview/tech/"/>
    
    
    <category term="服务器" scheme="https://blog.dlzhang.com/overview/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="Linux" scheme="https://blog.dlzhang.com/overview/tags/Linux/"/>
    
    <category term="宝塔面板" scheme="https://blog.dlzhang.com/overview/tags/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>全球新冠肺炎的扩散与防疫观察</title>
    <link href="https://blog.dlzhang.com/posts/45/"/>
    <id>https://blog.dlzhang.com/posts/45/</id>
    <published>2020-03-29T05:50:37.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>从一月开始蔓延的新冠病毒疫情至今已经两个多月了，本以为随着中国疫情的逐渐缓和，病毒蔓延得到了控制，生活也可以逐渐恢复正常了，谁知道本月以来疫情在全世界扩散开来。从一开始报道的韩国新天地教会疫情，到如今的美国、意大利确诊病例纷纷超越中国，形势也是越来越严峻。这个新冠肺炎疫情已经变成了一场影响全球经济社会发展的重大挑战。<a id="more"></a></p><h2 id="香港应对疫情的魔幻"><a href="#香港应对疫情的魔幻" class="headerlink" title="香港应对疫情的魔幻"></a>香港应对疫情的魔幻</h2><p>全国舆论对于新冠肺炎疫情的广泛关注起始于一月下旬（也即农历除夕前夕），随着武汉封城而进入顶峰。在此之前，香港媒体对此进行了比较集中的报道，当然这其中除了「跑得快」这个因素外，不外乎是对报道宣传内地负面新闻的热衷罢了。</p><p>香港媒体的这种报道确实让一部分香港民众对疫情产生了一定的关注，我认识的几个香港本地同学还曾特地向我询问内地疫情的情况。然而当时属于过年前的那段时间，香港刚刚从去年底的混乱中恢复过来，内地媒体也报道说「没有明确的人传人的证据」，所以我本人也没有对此引起更多的重视。</p><p>其实香港媒体最初对于疫情的关注，并没有让香港民众对本次新冠肺炎疫情产生足够的、提前的重视与防范，更多人是以一种看客的心态看待这次的疫情，甚至有人是幸灾乐祸的。这导致在一开始内地疫情极为严重的时候，香港激进本土派为代表的群体以「全面封关」为诉求口号，谋求香港对内地的封闭和拒绝内地人士访港。</p><p>这种不是真正出于公共卫生角度考量，而是带有政治目的的防疫诉求自然是得不到香港政府的认可，于是他们联合「黄色」医护人员开始进行医护届「罢工」来对政府施压。疫情当前，香港医护届似乎忘记了希波克拉底誓词（Hippocratic Oath）的字句，把政治利益放在了高于病患生命健康的地位。也不知道，他们选择医生、护士作为自己职业的时候，有没有那么一丝丝救死扶伤、治病救人的理想与追求？</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/03/hongkong.jpg!400x" alt="香港最新的防疫政策"></p><p>当时间进入三月中下旬中国内地的疫情得到了比较有效的控制之时，海外的疫情却面临四处爆发的局面。境外输入性风险不断加大，美欧日等地确诊病例逐日攀升，而香港确诊人数则多日位居全国首位。可是这时候，我们似乎听不到这些人主动提出要求对海外「全面封关」的诉求了。港府近期多次发布严格的防疫政策（如禁止多人集会、持牌酒肆禁止贩酒等），可是这些人依旧没有少出门、少聚会，除了戴口罩外依旧在上街示威与警察发生对抗冲突，还对港府各项防疫政策冷嘲热讽，不得不让人对香港近期的防疫产生一丝的担忧。</p><p>香港从去年底「蒙面违法」，到如今的「必须戴口罩」；而各个学校从去年底的混乱中停课，到如今因为疫情而继续停课，不能不说是一种魔幻了。</p><h2 id="新媒体时代的新挑战"><a href="#新媒体时代的新挑战" class="headerlink" title="新媒体时代的新挑战"></a>新媒体时代的新挑战</h2><p>在这次应对疫情当中，湖北省、武汉市当地一开始的工作确实不尽如人意。从新闻中可以看出，当地政府在应对新闻舆情、面对媒体方面依然不熟悉。新媒体、自媒体时代地方政府应对疫情的同时必然要直面媒体的监督和回应舆论的讨论。湖北、武汉在这方面出现的问题其实也不仅仅是当地特有的，很多地方其实都存在这方面的问题。</p><p>当然我们也看到那些熟悉本地区实际情况，能够清楚明白阐述自己的政策措施，及时调整工作不足回应舆论监督的官员得到了广大人民群众的热烈赞誉。例如，河南省省长的全省防控工作、天津疾控的张颖主任在流行病学调查中的细致追踪、温州市市长在《新闻1+1》上清楚阐述本地区的防控工作困难与应对措施、杭州市副市长用图表手板开新闻发布会等等。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/03/hangzhou.jpg!500x" alt="杭州市副市长陈卫强"></p><p>所以说，现在的网民也不是只会一味指责的。如果有好的表现，大家同样会给予赞扬的言语。这不是还有网友表示要去「偷省长」了吗？防疫与宣传是同样重要的两件事情，控制好流行传染性疾病不仅仅是医疗上的控制，更多的是要加强对社会各界的公共卫生教育和引导。</p><p>在人人都是媒体，大家都可以发表意见，时时刻刻都在监督工作的时代，如何将自己做过的、正在做的、将要做的、以及希望民众去做的准确完整清楚地阐述传达，或许是各地政府官员都需要重视的思考和问题了。这不仅仅是监督政府工作要求的，也是促进维护社会稳定、引导群众舆论出发要考虑的，还是一种不错的自我宣传方式。</p><h2 id="戴口罩与群体免疫"><a href="#戴口罩与群体免疫" class="headerlink" title="戴口罩与群体免疫"></a>戴口罩与群体免疫</h2><p>随着疫情在三月份开始全球范围内的蔓延扩散，大家都在说要外国人民和政府「抄作业」。中国防疫表现不能说满分，但是目前和国外比起来确实优秀许多了。</p><p>最关键也是最容易做到的戴口罩问题，中国是直接要求民众出门一定要戴口罩，纵使前期口罩不足也没有改变这一措施。而且「全民戴口罩」这一措施似乎仅仅在包括港澳台在内全中国范围内有共识，国外很多人都认为健康的人不需要戴口罩。确实，严格说口罩只需要患病的人戴，健康的人不需要戴。</p><p>但是，这是建立在所有患病病人都会自觉佩戴口罩，而且感染病毒即发病基础之上的。事实上，并不是发病的患者都会主动佩戴口罩，而且现在大量数据表明新冠病毒感染有潜伏期，并不一定出现临床症状，甚至有很多是无症状感染者，所以我们无法知道谁病了。有一个办法可以解决，那就是全民戴口罩，这样就能让所有带病毒的人，不把飞沫传播到空气中，同时因为没病的人也因为戴口罩，降低呼入病毒飞沫。</p><p>当然也有人说人人戴口罩，并不代表人人都会戴口罩。而且戴口罩的人容易不自觉触碰口罩外侧，然后接触口鼻眼睛，增加感染几率。可是如果仅仅因为一点小小的不足而无视全民戴口罩政策带来的巨大效果，似乎十分不合理不应该吧？这样的道理各国精英和领导人会不知道吗？精英怎么可能不知道，只不过因为口罩不够用就骗平民说不需要戴口罩；因为医院床位不够，就骗民众说群体免疫好。</p><p>说到群体免疫，英国政府简直是身先士卒、以身作则！鲍里斯前脚刚说完群体免疫政策好，不过大家要做好失去亲人的准备；后脚就发现大嘤的「太子」居然也感染了！「决赛圈」比赛瞬间紧张激烈起来了。正在大家还在震惊，还在担心老佛爷身体状况的时候，又传出首相（中堂大人）和卫生大臣（太医院）相继感染。 <del>庚子年果真是不太平！</del> 不对，应该是群体免疫本来就是投降主义，就是放弃的政策，是对本国人民和全球公共卫生的不负责任。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/03/uk.jpg!400x"></p><h2 id="走在前列的浙江行动"><a href="#走在前列的浙江行动" class="headerlink" title="走在前列的浙江行动"></a>走在前列的浙江行动</h2><p>中国在经历了2019年与美国全面性贸易战后，贸易谈判取得一定成果，与美国初步达成了贸易协议。看似贸易战可以缓一缓了，结果开年迎来疫情的重大打击，许多企业迟迟不能复工复产，经济面临严重的挑战，实现预期增长目标似乎已经不太可能。特别是对于浙江这种中小企业众多的省份，面临的困难更多。</p><p>作为浙江人，观察到浙江省在面对疫情后的恢复工作上是十分积极的。健康码，这一简化健康申报流程工作，加快人员监测的创新最先出现在浙江的疫情防控工作中，政企合作开发，全省乃至全国推广。浙江还首创「五色图」精准评估县域疫情风险等级，实现了对各地区疫情防治工作的分级管理。浙江多个县市政府也在疫情缓和之后，开展了「抢人」行动，前出几个劳动力输出大省，主动与当地对接「新浙江人」返回浙江的工作，包车运送到工作单位。这样的方式既帮助企业在困难时期尽快恢复生产，也减少了员工复工路上受到感染的风险。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/03/zhejiang.png!600x" alt="浙江省疫情五色图"></p><p>此外，浙江省在预防境外输入性病例方面也十分主动。在我老家，各个社区通过公安局出入境部门提供的本辖区内申领出入境证件记录，逐一落实情况，询问回不回来、如果回来什么时候回来（要去接机安排隔离）。我自己就在最近接到了分别来自社区和来自县公安局出入境部门的两个电话，爸妈那边也接到了一次社区打来的电话，同时还让我们进行网上信息登记。这样细致的工作，也让我在外面对爸妈更加放心了。</p><h2 id="考场并不只是在防疫"><a href="#考场并不只是在防疫" class="headerlink" title="考场并不只是在防疫"></a>考场并不只是在防疫</h2><p>或许谁也料想不到，2020年会以这样的方式开局。这一场遍及全球的传染病大流行，不仅仅是对医疗和公共卫生领域的考验，更是对整个社会的全面性挑战。</p><p>日本原定于今年夏季举办东京奥运会，也寄希望于通过奥运会拯救陷入低迷多年的经济。之前疫情出现上升势头时候大家就在讨论日本要不要推迟举办奥运会，可是东京方面一直不愿意松口，还按期开始了奥运圣火传递。后来在多国因为疫情严重宣布不参加奥运会的情况下，日本终于松口与国际奥委会达成共识推迟奥运会到明年举办。就在宣布奥运会、残奥会延期之后，却看到了日本特别是东京的确诊病例一下子增加了，甚至日本政府还说未来几周将迎来疫情高峰。这不得不让人怀疑，之前日本设置极高的检测门槛，疫情看似平缓，其实可能完全是因为「一切为了两会」。</p><p>韩国宗教，特别是基督教新教十分兴盛。而由于新教的特点和韩国政府的放任管理，基于新教而产生的邪教更是形形色色、多种多样。这次韩国的「新天地」教会引发的大规模群体性感染，一下子把韩国的邪教问题暴露了出来。一句「哈利路亚」，似乎就可以获得免疫的能力，甚至去鼓励教徒不顾政府禁令到处走动散播病毒。「宗教」开始侵入政权的范围，干预政治权力的运作的时候，这个国家是十分危险的。不过，幸好这次的韩国总统是文在寅而不是朴槿惠，抵抗住了各色「宗教」的压力，强势推动政府防疫政策。目前来看，韩国的疫情大致是被控制住了。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/03/korea.jpg!300x" alt="全光勋：哈利路亚！"></p><p>中国在疫情发生后就宣布了新冠病毒感染的肺炎救治费用，在医保报销后的差额由财政全额负担，也就是说对普通民众而言治疗是全免费的。事实上，在国家财政承受范围之内，对于大规模的流行传染病进行免费救治，可以避免一部分人因为经济负担而逃避治疗，从而避免可能导致的更大范围传染。但是，在这次疫情中，我们看到欧美国家在对新冠肺炎的诊断上就在讨论是否要免费，更不用说是不是要进行免费治疗。高昂的治疗费用让很多人望而却步，甚至能否获得检测确诊都变得十分困难。可是另一方面，我看到很多精英人士仅仅是因为有了轻微症状就得到了检测和确诊。</p><p>这里，不仅仅是医保制度的问题，其实还有是否决定要以牺牲经济来保障公共卫生防疫的考量。中国选择了以巨大的经济牺牲来换取对疫情的控制，而欧美很多国家的政治决策者显然更加偏向于保障经济发展。这里不能完全说孰是孰非，比较各自国情不同有不同的考量。但是，「佛系」的抗议不代表不作为，更不代表对人民生命的漠视和放弃。我们看到许多国家因为医疗系统被沉重的疫情击穿时候，不得不放弃对65岁以上老人的治疗。「时代的一粒灰，落在个人头上，就是一座山。对现在还挣扎在痛苦中的人们，谈生活太奢侈了，有些时候，光是活着，就已经拼尽全力。」这是某些人说中国的疫情时候曾说的话，而这句话其实现在看来更加适用于目前的欧美部分国家。</p><p>中世纪黑死病的流行和宗教谎言的破灭，让人们开始启蒙觉醒，从而打破了天主教对人们的枷锁，出现了文艺复兴。当年人们跑到郊外躲避瘟疫，住在一起的人们每人每天讲一个故事来渡过酷热的日子，成就了《十日谈》。这些故事中除了对于现实生活的描写、爱情的称扬、商人的智慧和才干之外，同时对于当时的帝王、贵族、教会等等势力的黑暗面加以揭露讽刺。那么，现在躲避疫情而宅在家里的欧美人们，面对现在他们政府和精英阶层防疫的政策，是否会有所思考，而成就新一部《十日谈》呢？我们拭目以待。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/03/decameron.jpg!500x" alt="《十日谈》插画"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从一月开始蔓延的新冠病毒疫情至今已经两个多月了，本以为随着中国疫情的逐渐缓和，病毒蔓延得到了控制，生活也可以逐渐恢复正常了，谁知道本月以来疫情在全世界扩散开来。从一开始报道的韩国新天地教会疫情，到如今的美国、意大利确诊病例纷纷超越中国，形势也是越来越严峻。这个新冠肺炎疫情已经变成了一场影响全球经济社会发展的重大挑战。</summary>
    
    
    
    <category term="观察者" scheme="https://blog.dlzhang.com/overview/viewpoint/"/>
    
    
    <category term="政治" scheme="https://blog.dlzhang.com/overview/tags/%E6%94%BF%E6%B2%BB/"/>
    
    <category term="COVID19" scheme="https://blog.dlzhang.com/overview/tags/COVID19/"/>
    
    <category term="公共卫生" scheme="https://blog.dlzhang.com/overview/tags/%E5%85%AC%E5%85%B1%E5%8D%AB%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>近期博客站点的更新</title>
    <link href="https://blog.dlzhang.com/posts/44/"/>
    <id>https://blog.dlzhang.com/posts/44/</id>
    <published>2020-03-22T16:10:23.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>最近再次对博客站点进行了一番比较大的更新升级，主要是成功解决了几个历史性遗留问题，例如访问的速度、图片没有缩略图预览、自定义样式代码不太清楚等等。经过这一次的改造，感觉未来短期内大规模的更新变动应该不会有了，毕竟主要的需求都已经实现。<a id="more"></a></p><h2 id="1-部署到对象存储"><a href="#1-部署到对象存储" class="headerlink" title="1. 部署到对象存储"></a>1. 部署到对象存储</h2><p>这其中主要的变动是更新了主题，以及从 Netlify 迁移到了阿里云对象存储（OSS），并且把部分的静态文件（css，js 和图像文件）放到了腾讯云对象存储（COS），还在腾讯云的对象存储上套了一层国内的 CDN 加速。</p><p>之所以这样区分是因为：腾讯云有每月对象存储免费额度和 CDN 免费流量额度，但是自定义域名绑定存储桶且开启 https 一定要通过 CDN 托管证书（不论境内外存储桶），而因为 CDN 要走国内节点所以一定要备案，故不能单独用腾讯云；阿里云对象存储可以解决上述问题，但是免费额度比较少，而且没有备案的域名虽然可以开启 https 但是一定要绑定非中国大陆节点的存储桶（如中国香港），因此将部分不需要自定义域名但是常常需要访问的资源放到腾讯云的存储桶加上国内 CDN 是非常有用的。我还使用腾讯云的云函数功能，每当存储桶有变动时候就让云函数去自动触发刷新各个节点缓存。</p><h2 id="2-持续集成与缩略图"><a href="#2-持续集成与缩略图" class="headerlink" title="2. 持续集成与缩略图"></a>2. 持续集成与缩略图</h2><p>这样，随之而来的问题就是部署站点，因为现在需要同时传输到两个地方。之前我采用的持续集成方案是 Travis CI，不过有一个问题是开始构建前的环境准备要比较长的时间。相比较而言，新出的 GitHub Actions 不仅启动比较快，而且集成在 GitHub 的代码仓库中，使用起来十分方便。另外，我还利用 GitHub Actions 拓展了一个新功能，也即每一次成功执行构建任务都会通过 Telegram bot 向我推送一条消息提醒（比邮件提醒方式方便多了）。</p><p>最后，因为 NexT 主题的 Fancybox 图片插件处理时没有提供缩略图的选项，使得每次加载图片都会载入原图。这样使得对象存储外网流出流量变大，而且会让访客浏览网页时加载速度偏慢。针对这一问题，我选择了一种对主题文件无损的修改方式来完成这个需求：在 GitHub Actions 工作流中利用 <code>sed</code> 的替换命令来实现对主题文件的临时性修改，从而实现图片默认显示缩略图、点击放大加载原图的效果。</p><h2 id="3-重构自定义样式"><a href="#3-重构自定义样式" class="headerlink" title="3. 重构自定义样式"></a>3. 重构自定义样式</h2><p>通过重构自定义样式，规范化了样式的格式，加入了每个样式的注释，还利用了 <code>mixins.styl</code> 样式文件。另外，因为 NexT 主题添加了黑暗模式和更新图标到 Font Awesome 5，所以也进行了色彩和图标调整适配。同时响应全国哀悼日对新冠肺炎疫情中逝世同胞和牺牲烈士的哀悼，加入了一个全站黑白样式，可以通过配置文件来打开关闭。</p><p>以上这些变动，都可以查阅我的 <a href="https://github.com/lei2rock/blog/blob/src/.github/workflows/deployment.yml">GitHub Actions 脚本</a> 以及博客的 <a href="https://github.com/lei2rock/blog">代码仓库</a> 了解。最后，放上博客的测速结果地图。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2020/03/speed-test.jpg!500x" alt="网站测速结果"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近再次对博客站点进行了一番比较大的更新升级，主要是成功解决了几个历史性遗留问题，例如访问的速度、图片没有缩略图预览、自定义样式代码不太清楚等等。经过这一次的改造，感觉未来短期内大规模的更新变动应该不会有了，毕竟主要的需求都已经实现。</summary>
    
    
    
    <category term="科技树" scheme="https://blog.dlzhang.com/overview/tech/"/>
    
    
    <category term="Hexo" scheme="https://blog.dlzhang.com/overview/tags/Hexo/"/>
    
    <category term="对象存储" scheme="https://blog.dlzhang.com/overview/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
    <category term="GitHub Actions" scheme="https://blog.dlzhang.com/overview/tags/GitHub-Actions/"/>
    
  </entry>
  
  <entry>
    <title>出香港记</title>
    <link href="https://blog.dlzhang.com/posts/43/"/>
    <id>https://blog.dlzhang.com/posts/43/</id>
    <published>2019-12-13T11:38:00.000Z</published>
    <updated>2020-11-27T23:34:16.432Z</updated>
    
    <content type="html"><![CDATA[<p>简单记述一下上个月逃离香港的情况，既是记录自己的经历，也是为了留存历史。因为你怎么也想不到，在一个全球治安状况领先的地区，一个在全中国范围内都是最发达的城市之一，最后人们却需要因为社会动乱而被迫逃离。<a id="more"></a></p><p>香港的大规模抗议示威自6月12日立法会准备二读《逃犯条例》修订草案开始，经过一个暑假的蔓延，情势已经有所缓和。但是，一切的缓和其实都是在为了11月份的区议会议员选举做铺垫和准备的。无论是元朗还是市区的冲突，说实话因为我们学校远离市区，所以如果不去市中心感受其实并不真切。其实这也算是很多香港市民的感觉了，因为影响不到自己的日常生活，所以无感而不去表达意见。</p><p>时间进入11月份，随着区议会议员选举的临近，事态陡然升级。最开始波及学校是从各大学的毕业典礼开始的，然后香港科技大学、香港城市大学先后发生了「黑衣人」与香港警察之间的冲突。在香港城市大学，甚至发生了冲击学生宿舍的可怕事件。</p><p>11月11日，星期一。那天因为原定于要准备给学生监考小测验和上习题课，还特意起了个大早。然后就在手机上看到了港铁东铁线停止运营的消息，稍后就收到了学校宣布当天停课的通知。是日，有暴徒冲入学校范围，本校校内情况陡然紧张。</p><p>当天上午学校的情况还算良好，有小规模的「黑衣人」聚集，但是尚未发生比较激烈的冲突。因为有韩国学生当天下午要回国参加兵役体检，我还特地给该学生在学校善衡餐厅安排的提前考试。当天下午开始直到入夜，学校的情况开始恶化。</p><p>不过，我在白天学校路面情况比较稳定的时候还特地上山去学校超市采购了一些食物。但是，学校超市里速冻食品、蔬菜肉类等食材均已经被抢售一空。仅剩少量方便面、面包、饼干等食品，无奈买了一些回到宿舍，学校当天傍晚宣布次日继续停课。</p><p>11月12日，星期二。这一天自白天开始情况就十分严重，上午田径场跑道被点燃，黑烟漫天。其后更是传出惊人的消息，宿舍楼下体育场的器材室弓箭被偷走了，幸好后来被及时追回。此外，善衡书院斜坡下十字路口在下午也烧起大火冒出滚滚黑烟，斜坡上都是「黑衣人」、「记者」、警察的身影。当天没有出门，傍晚学校宣布次日继续停课。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2019/12/playground.jpg!500x" alt="宿舍楼对面的操场"></p><p>晚上，舍监过来询问是否还有食物，没有的话她那边还有一些。我吃了一碗泡面当晚饭，不过还能坚持一段时间，就说暂时不需要，先留给其他有需要的同学吧。当晚新闻报道，因为宿舍附近通往科学园、横跨东铁线的「二号桥」上有人往铁轨扔东西威胁铁路运行，警察进入二号桥靠近学校一侧。由此，因为警察进入学校，学生开始与警察发生冲突。而因为本校部分校领导在冲突现场十分不靠谱的对话，不仅没能劝阻「黑衣人」，与警察之间的沟通也宣告失败。其后更有消息传出，刚刚卸任的前任校长也来到学校开展协调，当然前任也没协调沟通好。</p><p>随着谈判、对话的破裂，双方开始了激烈的冲突。燃烧瓶和催泪弹互相投掷，我们在宿舍活动室隔着窗户玻璃都能看到山坡下面火光冲天。催泪烟一度弥漫进宿舍楼内部，烟雾报警器也一度报警。当晚，媒体报道中说甚至有人叫嚣要「炸了学校」，显然是吓吓人而已，不过看微博上还是引起了不小的议论。宿舍楼下的小广场作为大后方，还有少量「黑衣人」坐着休整。和隔壁房间的几个同学沟通了一下，大家纷纷表示比较担心警察在深夜驱散的时候万一「黑衣人」企图退入宿舍楼就很危险（因为之前城市大学就发生过类似的事情）。</p><p>因为当天白天还出现过一两名「黑衣人」进入宿舍楼，上到最高层眺望「侦查」的事情，我们也和宿舍管理人员、舍监等表明希望能够确保门禁的正常。当晚到凌晨，有同学选择连夜从学校逃出去，甚至有的是几个女生单独出门（感觉挺危险的）。考虑到夜晚冲突不断情况复杂，凌晨又交通不便，次日上午又还有要破坏市区公共交通的行动预告，我选择了第二天下午走。因为根据前一天的情况推断，下午的情况比较稳定，不太危险。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2019/12/pgh.jpg!500x" alt="12日下午宿舍楼下"></p><p>11月13日，星期三。出去时候还经过了前一晚的「战场」，「黑衣人」在那里吃午饭。虽然经过了十几个小时，空气里依旧弥漫着催泪烟的刺激性气味。不过，因为他们的主要目标是警察，如果不去主动招惹，在当时的情况下，我通过这片区域还是安全的。</p><p>当然在学校里，显然是打不到车了，有消息说科学园那边的码头有警方专门的船接送内地学生，不过考虑到距离有点远，我还是没有过去。从学校北边的小门出去走到科学园的时候发现，这边的居民区什么事情都没有，一切正常。就隔了一条铁路，这边是安静闲适甚至有人在遛狗、散步、健身，而那边却是「烽火硝烟」，不得不让人感慨万千。没有选择地铁走罗湖落马洲去深圳了，我选择了直接打车去西九龙高铁站，坐高铁深圳福田，想着这有一地两检，过了边检就到了社会主义的怀抱。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2019/12/west_kowloon.jpg!500x" alt="西九龙一地两检口岸管理线"></p><p>上了出租车后，司机师傅听闻我的情况，也是只能摇头，说我们还是回去吧，他对于香港这样的情况是十分得无奈。和司机师傅的交谈中得知，他在内地工作十几年了，从事管理工作，现在退休回香港，朋友有多余的出租车所以邀请他来开。目前的事态变化对他的收入影响不大，毕竟还有退休金。但是他很多的同事因为全靠开出租车养活家庭，所以近期收入锐减，面临很大的困境。因为原本直接前往高铁站的道路被堵住了，导致交通十分拥堵，所以选择了绕一个大弯去高铁站（车费也是蹭蹭蹭上去）。</p><p>到达西九龙高铁站后，取票、安检、通过边境检查，顺利踏入内地口岸管理区的时候，整个人悬着的心瞬间就放了下来，想到这里有深圳公安西九龙派出所的警察叔叔，就感到无比得安全和放心！候车的时候，收到学校消息，宣布本学期直接结束，而其他高校也相继宣布停课。一开始还觉得惊讶，因为本来是觉得去深圳避难几天也许事情就缓和来，没想到直接宣布学期结束。</p><p>我顺利抵达深圳福田高铁站后，就和前一天已经撤离到深圳的小伙伴汇合，愉快地去吃了外婆家，感受到了中国特色社会主义先行示范区的活力和悠闲。在深圳待了两天，发现香港局势短期无法稳定下来，就买了机票回家了。因为出来得急，过冬衣服都没带，还特地去优衣库买了裤子、外套。</p><p>现在想想仅仅隔着一条深圳河，此岸是太平盛世，彼岸是烽火狼烟；而就在区区二三十年前，此岸的人还想着就算冒着生命危险也要逃去彼岸讨生活，不能不说是一种讽刺了。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2019/12/shenzhen.jpg!500x" alt="深圳：中国特色社会主义先行示范区"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记述一下上个月逃离香港的情况，既是记录自己的经历，也是为了留存历史。因为你怎么也想不到，在一个全球治安状况领先的地区，一个在全中国范围内都是最发达的城市之一，最后人们却需要因为社会动乱而被迫逃离。</summary>
    
    
    
    <category term="观察者" scheme="https://blog.dlzhang.com/overview/viewpoint/"/>
    
    
    <category term="港澳" scheme="https://blog.dlzhang.com/overview/tags/%E6%B8%AF%E6%BE%B3/"/>
    
    <category term="深圳" scheme="https://blog.dlzhang.com/overview/tags/%E6%B7%B1%E5%9C%B3/"/>
    
    <category term="政治" scheme="https://blog.dlzhang.com/overview/tags/%E6%94%BF%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>邻居们的例行晨会</title>
    <link href="https://blog.dlzhang.com/posts/42/"/>
    <id>https://blog.dlzhang.com/posts/42/</id>
    <published>2019-11-20T03:02:16.000Z</published>
    <updated>2020-11-27T23:34:16.428Z</updated>
    
    <content type="html"><![CDATA[<div class="note success"><p>即将搬离住了二十年的小区，重发这篇中学随笔，感受老邻居们的可爱与热情。</p></div><p>　　七八月份，大热天的，清晨太阳就老高了。起床了，待在家里吧，闷得慌；逛逛街购物呢，又太热。正好，我家门口有花坛、石凳，环境虽算不上雅致也还不错。花坛中浓密高大的树木的树叶丫杈交错重叠，虽没有喜鹊、杜鹃的鸣叫，但是有麻雀的嬉戏。<a id="more"></a><br>　　就这样，慢慢地，这儿便成了附近隔壁邻居们上午乘凉、聊天的好去处。聊聊天也不是仅仅关于家长里短的琐碎小事，奇闻轶事、道听途说的也有，还常常说说议议国家大事、时政要闻，为祖国的统一大业出出点子。要是等会儿再过来个三四岁的小孩，冲着他那可爱的模样，大家还会逗逗他，爽朗的笑声便像刚开的水沸腾开来。<br>　　后来啊，每天早上来这儿报到“开会”成了惯例，要是你哪天迟到了或是没有来，大家都要问问怎么回事儿呢！这不，到了暑假，即使老爸老妈不来催我起床，邻居们的侃大山似的“开会”的热情气氛也把我给“热”醒了。听——<br>　　“你家孩子考上了没有啊？”<br>　　“还不知道呢！你家的呢？”<br>　　“瞧，这不刚知道嘛！考上了，×××大学！这《都市快报》你拿去看看，上面有投档分数线。”<br>　　瞧，邮递员刚把印有我省高考文、理科地二批投档分数线的《都市快报》送到手上，尚未被录取的几位家有考生的家长们便急切地翻看查对。看到自己的孩子的分数达到了投档分数线，便立马掏出手机去告诉家长。<br>　　“喂，你快看看家里8月3日的《都市快报》有没有，那儿印有投档线！如果没有就快去买一份。”听听，这位妈妈已经急不可待了。<br>　　“没事儿，没事儿的，把这份拿去好了。” 《都市快报》的主人——一位大爷看着她急切的样子，便递给她报纸。边道谢边往家里赶，这位母亲拿着报纸快步跑着离开了我们的视线。哎，真是家有考生，可怜天下父母心啊！<br>　　过了会儿，渐渐地，来“与会”的人越来越多，椅凳便紧张起来。礼让一番当然是少不了的；但邻居们却认为增加移动的椅凳，治标不治本，纷纷为我家门口的“开会场所”改造出谋划策。<br>　　“这地儿太小了，你们应该多弄几个石凳。”<br>　　“不不，干脆把这棵桂花树砍了，把花坛用水泥抹平了，那地方不就大了三四倍了！”<br>　　“对对，还要再开个冷饮摊，卖卖冷饮，多好啊！”<br>　　天哪，竟然想到把长了十来年的桂花树给砍了当“开会场所”，这“规划局长”当得太荒唐了吧！可我家这些邻居就是这么热心肠：有点儿事都愿意帮，需要东西吧也都愿意借。连小贩卖肉卖菜的，也愿意常来，你说热不闹热闹？<br>　　“快中午了，我要回去做饭了，先走了啊。”<br>　　“我也回去了，饭还没做呢！”<br>　　随着太阳渐高，“会议”也就自然而然的散了。全国上下不是构建“和谐社会”吗？我看就凭这个，我们小区这些邻里就应该评为“和睦邻里模范”！</p><p align="right">本文写于2009年8月5日]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;即将搬离住了二十年的小区，重发这篇中学随笔，感受老邻居们的可爱与热情。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　　七八月份，大热天的，清晨太阳就老高了。起床了，待在家里吧，闷得慌；逛逛街购物呢，又太热。正好，我家门口有花坛、石凳，环境虽算不上雅致也还不错。花坛中浓密高大的树木的树叶丫杈交错重叠，虽没有喜鹊、杜鹃的鸣叫，但是有麻雀的嬉戏。</summary>
    
    
    
    <category term="碎碎念" scheme="https://blog.dlzhang.com/overview/life/"/>
    
    
    <category term="中学" scheme="https://blog.dlzhang.com/overview/tags/%E4%B8%AD%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>上海市垃圾分类的一点想法</title>
    <link href="https://blog.dlzhang.com/posts/41/"/>
    <id>https://blog.dlzhang.com/posts/41/</id>
    <published>2019-07-07T06:33:43.000Z</published>
    <updated>2020-11-27T23:34:16.428Z</updated>
    
    <content type="html"><![CDATA[<p>注意到上海最近的垃圾分类引发了热烈讨论，其实我老家（包邮区某十八线小县城）早就实施了垃圾分类一年有余。当然没有上海这样细分，主要是分为「厨余垃圾」和「其他垃圾」两类，类似于上海的「干垃圾」和「湿垃圾」。家里主要是厨房设置两个垃圾桶，社区也会给每户门口配发两个垃圾桶，倒垃圾时候对应倒在两个垃圾桶里就可以了。实际体验上没有感觉到什么不方便的地方，基本上在家中扔垃圾时候就分类完成了。<a id="more"></a></p><p>上海的垃圾分类，主要麻烦其一在于四个分类中的「干垃圾」、「湿垃圾」的分类对于普通市民而言过于陌生和抽象，其二是定时投放垃圾对于许多白领而言不方便。对于前者，个人认为目前北京市计划制定的垃圾分类方法比较简单，也就是「有害垃圾」与「可回收垃圾」两类不变，另外两类改成「厨余垃圾」和「其他垃圾」，这样的概念对于普通市民是更容易理解接受的（虽然论垃圾后续分类处理而言上海的干湿垃圾分类更科学）。对于定时投放问题我觉得有关部门可能还需要制定更加灵活的收集垃圾方案来便利市民生活，比如有的社区每户配发了二维码不干胶可以粘贴在自己的垃圾袋上便于落实分类责任，比如延长夜间收集垃圾时间等等。</p><p>关注到一些人对于上海市垃圾分类政策以及后续要在全国铺开的垃圾分类举措颇有微词，但是要想想发达国家或许可以把垃圾运到发展中国家解决问题，但是中国的垃圾只可能是中国人自己来解决。上海市是全国经济中心也是经济最发达的地区之一，城市化率又很高，上海市可能是全国最容易推广垃圾分类政策的城市。中国社会能否推广垃圾分类政策，也许上海市的试点最能积累经验与教训。通过在上海这样的城市的垃圾分类试点可以让我们发现实际运行中的缺陷，在后续向省会级城市等地区铺开时候改进实施政策的不足。</p><p>垃圾分类处理回收，既可以回收再利用资源，又可以最大程度上减少环境破坏，或许在最初的习惯与制度培养建设上需要花一段时间，但是一旦建成将是造福未来的重要举措。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;注意到上海最近的垃圾分类引发了热烈讨论，其实我老家（包邮区某十八线小县城）早就实施了垃圾分类一年有余。当然没有上海这样细分，主要是分为「厨余垃圾」和「其他垃圾」两类，类似于上海的「干垃圾」和「湿垃圾」。家里主要是厨房设置两个垃圾桶，社区也会给每户门口配发两个垃圾桶，倒垃圾时候对应倒在两个垃圾桶里就可以了。实际体验上没有感觉到什么不方便的地方，基本上在家中扔垃圾时候就分类完成了。</summary>
    
    
    
    <category term="观察者" scheme="https://blog.dlzhang.com/overview/viewpoint/"/>
    
    
    <category term="垃圾分类" scheme="https://blog.dlzhang.com/overview/tags/%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>最近的台湾电视节目</title>
    <link href="https://blog.dlzhang.com/posts/40/"/>
    <id>https://blog.dlzhang.com/posts/40/</id>
    <published>2019-06-07T04:53:05.000Z</published>
    <updated>2020-11-27T23:34:16.428Z</updated>
    
    <content type="html"><![CDATA[<p>话说最近台湾的电视节目是越来越无聊了。闽南语本土剧《炮仔声》好好的剧情开始往不可控制的方向发展，剧情从最开始的温情路线走向了狗血，男主角女主角长期消失，男女配角倒是天天走主线剧情，渐渐主角化。我都怀疑是不是主角出场费太高了，少写些剧情可以省钱（误）。导致我现在都不看直播了，甚至都不去看完整的剧集，直接看网上的精剪版，而且居然也不影响追剧的节奏，也是很魔幻了。<a id="more"></a></p><p>而本来之前在关注的几个思路「比较正常」的政论节目《新闻深喉咙》、《少康战情室》也渐渐迷失了逻辑。前者的最强主持人平秀琳出走东森，导致该节目彻底「韩天化」。后者除了一贯以来以有色眼镜看大陆与香港外，也暗戳戳「捧郭踩韩」却口口声声坚持中立。</p><p>现在发现「<a href="https://www.youtube.com/channel/UCiOR3zQCU-tLza5g1MuqABA">寰宇全視界</a>」这个节目似乎还不错，一周一更新，不像那些天天更新的节目般粗制滥造。而且，来宾有蓝有绿却都不极端偏激，讨论问题也不仅仅局限于岛内选举，会把很多时间用来讨论国际事务。</p><p>另外，王志郁小姐姐的在三立 iNEWS 上的《iNEWS 大世界》节目立场观点因为没有像三立一贯以来那样以有色眼镜看待大陆（<del>其实可能只是因为王志郁小姐姐的颜值吧</del>），意外地获得了大陆网友的广泛好评，正如大家评论所言「一三五吹、二四六贬」。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2019/06/huanyu.jpg!500x" alt="寰宇全視界"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;话说最近台湾的电视节目是越来越无聊了。闽南语本土剧《炮仔声》好好的剧情开始往不可控制的方向发展，剧情从最开始的温情路线走向了狗血，男主角女主角长期消失，男女配角倒是天天走主线剧情，渐渐主角化。我都怀疑是不是主角出场费太高了，少写些剧情可以省钱（误）。导致我现在都不看直播了，甚至都不去看完整的剧集，直接看网上的精剪版，而且居然也不影响追剧的节奏，也是很魔幻了。</summary>
    
    
    
    <category term="观察者" scheme="https://blog.dlzhang.com/overview/viewpoint/"/>
    
    
    <category term="台湾" scheme="https://blog.dlzhang.com/overview/tags/%E5%8F%B0%E6%B9%BE/"/>
    
    <category term="影视" scheme="https://blog.dlzhang.com/overview/tags/%E5%BD%B1%E8%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2019 后的折腾</title>
    <link href="https://blog.dlzhang.com/posts/39/"/>
    <id>https://blog.dlzhang.com/posts/39/</id>
    <published>2019-06-04T08:30:53.000Z</published>
    <updated>2020-11-27T23:34:16.428Z</updated>
    
    <content type="html"><![CDATA[<p>大晚上看了一下 WWDC 2019 的直播，其中比较印象深刻的就是 iPad OS 和 macOS 之间的整合联动了。官方支持 iPad 成为 Mac 的扩展屏幕，而且 iPad 支持了读取 U 盘和非正式支持鼠标操作，分屏功能也更强大了，截图编辑功能也丰富了许多，感觉这几项更新大大提升了 iPad 生产力。<a id="more"></a></p><p>不过说到更新开发者版本的系统，以前只需要安装一个描述文件就可以升级了，结果这次 iPad OS 和 iOS 13 都不能这样操作了，大概是因为 bug 太多吧，所以只能下载固件手动更新系统了。反正对于主力机器手机和电脑我是不敢升级的，比较测试版 bug 满天飞，就把手头的 iPad Pro 升级了试试看。</p><p>升级完的感觉大概就两个字，真香！体验上很不错，就是个别地方还是存在一些 bug 的，但是不影响 iPad 的日常使用。手痒的我又想尝试升级一下 macOS，翻了一下 Twitter 和微博上升级后的体验，发现事情没有这么简单，特别是 OneDrive 似乎是无法在新系统下正常运行的。于是，成功被劝退，我还是等公众测试版发布了再更新吧。</p><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2019/06/iPadOS.jpg!350x" alt="iPad OS"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大晚上看了一下 WWDC 2019 的直播，其中比较印象深刻的就是 iPad OS 和 macOS 之间的整合联动了。官方支持 iPad 成为 Mac 的扩展屏幕，而且 iPad 支持了读取 U 盘和非正式支持鼠标操作，分屏功能也更强大了，截图编辑功能也丰富了许多，感觉这几项更新大大提升了 iPad 生产力。</summary>
    
    
    
    <category term="碎碎念" scheme="https://blog.dlzhang.com/overview/life/"/>
    
    
    <category term="软件" scheme="https://blog.dlzhang.com/overview/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="iPad" scheme="https://blog.dlzhang.com/overview/tags/iPad/"/>
    
  </entry>
  
  <entry>
    <title>深圳浙江菜探寻</title>
    <link href="https://blog.dlzhang.com/posts/38/"/>
    <id>https://blog.dlzhang.com/posts/38/</id>
    <published>2019-05-12T05:45:36.000Z</published>
    <updated>2020-11-27T23:34:16.428Z</updated>
    
    <content type="html"><![CDATA[<p>近日又去深圳觅食，说起来在香港确实很难吃到合口味的浙江菜了，深圳倒是挺多的。总体来说，几家源自浙江的连锁餐厅味道、价格方面都不错，是值得经常去品尝品尝的。<a id="more"></a></p><ul><li><strong>新白鹿</strong>：最佳的选择，物美价廉（见下图），而且点单结账都可以直接扫描餐桌上的二维码完成，简直是「社交恐惧症」患者的福音啊（笑）。</li><li><strong>外婆家</strong>：算是其中比较出名的一家，味道也是不错的，当然和新白鹿一样，就餐排队的也是很多。</li><li><strong>绿茶</strong>：比较不太好吃，，感觉网红的意味比较浓，知名度似乎蛮高的，但是菜单的菜品和口味都不是感觉很地道，因此不是很推荐。</li></ul><p><img data-src="https://website-1256060851.cos.ap-hongkong.myqcloud.com/posts/2019/05/sz-xinbailu.jpg!400x"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近日又去深圳觅食，说起来在香港确实很难吃到合口味的浙江菜了，深圳倒是挺多的。总体来说，几家源自浙江的连锁餐厅味道、价格方面都不错，是值得经常去品尝品尝的。</summary>
    
    
    
    <category term="碎碎念" scheme="https://blog.dlzhang.com/overview/life/"/>
    
    
    <category term="美食" scheme="https://blog.dlzhang.com/overview/tags/%E7%BE%8E%E9%A3%9F/"/>
    
    <category term="深圳" scheme="https://blog.dlzhang.com/overview/tags/%E6%B7%B1%E5%9C%B3/"/>
    
  </entry>
  
  <entry>
    <title>博客收到一笔巨额打赏</title>
    <link href="https://blog.dlzhang.com/posts/37/"/>
    <id>https://blog.dlzhang.com/posts/37/</id>
    <published>2019-04-21T06:06:20.000Z</published>
    <updated>2020-11-27T23:34:16.428Z</updated>
    
    <content type="html"><![CDATA[<p>昨天因为帮了一位小伙伴解决博客相册设置的一些问题，收到一笔巨额的打赏（人民币50元），真是至今收到的最大一笔打赏！十分感谢～ 说实话，本来开这个博客也没打算收钱，就是分享一些自己的心得体会、记录一些碎碎念罢了，现在能够因此得到别人的认可还是很开心的事情。<a id="more"></a></p><p>话说看着今天艳阳高照，对比之下昨天下午的雨特别大。暴雨如注有如「山竹」台风袭来时候的雨势，整个天都暗下来都差点感觉是傍晚了。暴雨结束就没有出门觅食的想法了，直接点了个外卖。说起香港的外卖，也是没脾气，确实不能和内地的外卖服务相比。无论如何，还算有几个还不错的外卖应用可以用，不出门能吃好吃的也是一件很开心的事情。而且可以换换口味也是蛮不错的，毕竟学校餐厅吃多了也会腻的。</p><p>另外，最近关注湾湾的大选，真是好戏连台，各种内斗互打不要太精彩，政治走到这样如此境界也是挺厉害的了，哈哈～</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天因为帮了一位小伙伴解决博客相册设置的一些问题，收到一笔巨额的打赏（人民币50元），真是至今收到的最大一笔打赏！十分感谢～ 说实话，本来开这个博客也没打算收钱，就是分享一些自己的心得体会、记录一些碎碎念罢了，现在能够因此得到别人的认可还是很开心的事情。</summary>
    
    
    
    <category term="碎碎念" scheme="https://blog.dlzhang.com/overview/life/"/>
    
    
    <category term="blog" scheme="https://blog.dlzhang.com/overview/tags/blog/"/>
    
    <category term="打赏" scheme="https://blog.dlzhang.com/overview/tags/%E6%89%93%E8%B5%8F/"/>
    
  </entry>
  
  <entry>
    <title>建站简史</title>
    <link href="https://blog.dlzhang.com/posts/36/"/>
    <id>https://blog.dlzhang.com/posts/36/</id>
    <published>2019-04-03T15:06:20.000Z</published>
    <updated>2020-11-27T23:34:16.428Z</updated>
    
    <content type="html"><![CDATA[<p>很久以前（大概是小学时代），我学会了用 Frontpage 制作网页，但是没有能力把我的网站放到互联网上。自己最早的博客应该要算是新浪博客了，在中学时代就开通了。有模有样地发布了几篇自己写的作文，不过后来感觉编辑很麻烦，加上主题又不好看，所以就放弃了。之后简单地用过 <a href="http://www.lofter.com/">Lofter</a> ，不过主题只适合放照片不适合展示文字。<a id="more"></a></p><p>在大学的时候转投了 <a href="https://www.weebly.com/">Weebly</a> ，当年没被屏蔽，浏览起来也挺顺畅的，就尝试着建立了一个个人主页。后来给本科的科研训练团队做了一个蛮不错的团队形象展示网站。由于科研训练项目的结束以及 GFW 的屏蔽，Weebly 也就最终被抛弃了。</p><p>来了香港之后又试了试在 <a href="https://www.strikingly.com/">Strikingly</a> 建立个人网站，但是免费版只是一个单页网站，有些内容展示起来不是很方便，只适合作为个人电子简历之类的用途。在使用 Strikingly 期间，尝试将 <a href="http://www.jianshu.com/">简书</a> 作为个人博客。简书支持富文本模式和 Markdown 两种模式，但是感觉这个社区发布的很多都是一些文艺小清新的文字，首页推荐的也大多是这类，而且存在一大票僵尸粉。于是，转投 <a href="https://zhuanlan.zhihu.com/econramble">知乎专栏</a> 。知乎专栏的互动效果明显好于简书，相关专业的知乎用户也蛮多的，而且编辑器用起来也比较顺手。</p><p>由于开设的知乎专栏主要局限于经济学领域，而且 Strikingly 也不是很好用，我开始探索其他工具、平台。找来找去感觉还是 GitHub Pages 上部署静态网页的方式好用。学术主页基于 Freelancer，参考了 <a href="http://www.sijichun.pro/">Jichun Si</a> 的大致内容布局并进行了魔改。个人博客开始是基于 LoeiFy 设计的 <a href="https://github.com/LoeiFy/Mirror">Mirror</a> 主题，使用 GitHub Issues 进行内容编辑。不过因为不能进行个性化设置，现在改成了被大家广泛使用的 Hexo NexT。</p><p>一直以来 GitHub Pages 拒绝百度搜索到爬虫，导致百度搜索对博客内容的收录极低。而且部署需要本地运行一次，或者是选择如 Travis CI 这类持续集成系统，偏偏最近部署一次特别慢，而且出现刚才提到的 bug。因此就想着是不是换一个页面生成方式，或者换一个部署的地方。无意中发现了 <a href="https://www.netlify.com/">Netlify</a>，该网站提供快速的静态网站生成和部署模式，实际体验来看生成和部署发布速度都很快，访问速度经过测试也没有很差，就迁移过去。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很久以前（大概是小学时代），我学会了用 Frontpage 制作网页，但是没有能力把我的网站放到互联网上。自己最早的博客应该要算是新浪博客了，在中学时代就开通了。有模有样地发布了几篇自己写的作文，不过后来感觉编辑很麻烦，加上主题又不好看，所以就放弃了。之后简单地用过 &lt;a href=&quot;http://www.lofter.com/&quot;&gt;Lofter&lt;/a&gt; ，不过主题只适合放照片不适合展示文字。</summary>
    
    
    
    <category term="科技树" scheme="https://blog.dlzhang.com/overview/tech/"/>
    
    
    <category term="blog" scheme="https://blog.dlzhang.com/overview/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>唐马儒因无法偿还暴走漫画「卖身契」违约金而被起诉</title>
    <link href="https://blog.dlzhang.com/posts/35/"/>
    <id>https://blog.dlzhang.com/posts/35/</id>
    <published>2018-08-09T09:58:00.000Z</published>
    <updated>2020-11-27T23:34:16.428Z</updated>
    
    <content type="html"><![CDATA[<p>看了李迪与任剑的双方回应，大体上看清楚了事情的主要矛盾所在。暴漫作为一家初创公司在前期没法实现盈利，现金流有限，所以只能把主要资金用于扩大经营而无法给予公司主创人员合理的回报。公司只能压低员工工资降低成本，这个只要双方有共识，公平透明地签署合同，把薪资明确写在合同里是没有问题的（大家共同「用爱发电」）。<a id="more"></a></p><p>任剑说：「他只需要负责演出，而我们却需要为他铺垫未来，为他规划蓝图，为他启用所有编剧精益求精的完善人设。」这个辩护其实分明就是贬低了个人的价值与贡献，而扩大了公司编剧、创意等的作用。难道说，「唐马儒」这个角色有了一个好剧本、好创意之后，真的「只需要」负责演出就够了吗，观众只是喜欢「唐马儒」这个角色背后的创意还是对创意与演技完美结合的欣赏呢？毕竟头套形象「王尼玛」换了人只要头套和声线不变，他就还是「王尼玛」；可是「唐马儒」这个角色，换了演员他就不再是「唐马儒」了。</p><p>作为创业公司，你如果只能要求大家一起「用爱发电」，在给予低工资同时卖情怀、画大饼，不能给主创人员一些原始股份作为激励，或者在合约里承诺期权激励，员工出走也是刚刚好而已罢了。当然，上述的激励可能给了会留下来，也可能不愿意，但是这种做法算是创业公司以低薪留住重要初创员工的主要做法了。具体有没有给股权期权的细节任剑和李迪都没有披露，到底当时有没有提不知道，大概率是没有承诺。</p><p>暴漫公司应该思考一下，如何维护好公司一个真人 IP 的知识产权，这种真人演员离职就存在着公司知识产权受损的重要员工离职事情，暴漫如果真心想处理，就不会是低薪+画饼了，就应该是高薪或者低薪+期权激励的形式留住员工。既然没有留住，公司也要承担可能被员工冒用公司 IP 形象的风险，现在这种一地鸡毛的情况，站在暴漫公司角度，当初其实是可以避免的。</p><p>当然，如果员工未经公司同意，私自用公司的知识产权盈利也是不对的。其中可能是主观故意擅自使用「唐马儒」等进行的个人盈利；也可能是因为李迪和「唐马儒」联系确实很紧密，所以，他的一些个人商业行为或多或少被人与「唐马儒」联系了起来，从而侵害了暴漫的权益，但是在这方面李迪又没有及时制止。其中的细节可能就是各说各话了，外人应该也很难厘清事情的细节，不过事实上就是李迪在诉讼上败诉了，他侵害了暴漫公司的知识产权。不过也要想想看，这个事情的诱因是对员工的报酬太低，毕竟人也是要生活的。</p><p>结合知乎关于为什么离职暴漫的问题，可见作为一家创业公司，在「员工的激励」、「知识产权管理」两方面都是有问题，但是好像任剑在回应里没有提及这几个方面。暴漫在《暴走大事件》中树立的正面形象与该公司与员工的奖励激励制度上的落差，可能会给公司形象带来继王尼玛头套争议、豫章书院节目下架事件、诋毁英烈事件后又一次的伤害吧。</p><p>最后谈谈与本题无关的关于《暴走大事件》的一些内容。</p><p>很多暴漫的观众是不会主动去看主流媒体（对，就是被某些人认为的所谓「只报喜不报忧」的「党媒」），所以主流媒体的客观报道和舆论导向根本无法进入他们的视野。《暴走大事件》在比如B站上的一些新闻（特别是负面）评论、点评看似泼辣犀利，实则在很多主流媒体上也是稀松平常，并不是禁忌。</p><p>当你看看在B站一些主流媒体新闻视频的弹幕里出现「哇，我竟然在B站看新闻」之类，或者「哇，这个也能报道」之类就可见一般，事实上是B站并不只有他们喜欢的二次元，主流媒体也并不忌讳触及一些社会的不足之处。</p><p>但是因为一些观众平时是不会看主流媒体的，当他们第一次接触到这样的新闻评论时候，当然会觉得「哇，好犀利的点评」、「此生无悔入暴漫」等等，一下把《暴走大事件》作为了意见领袖，可是其中的舆论导向是否真的是客观公正就有待商榷了。不可否认，《暴走大事件》这个节目的形式与创意很棒，在脱口秀节目中制作也十分优秀，但是后期的制作与创意上，对话题和舆论导向上的把握失控也显示出暴漫在舆论导向、话题引领、价值观判断上的不成熟。</p><p><a href="https://www.zhihu.com/question/289038139/answer/464755383">阅读知乎原文</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;看了李迪与任剑的双方回应，大体上看清楚了事情的主要矛盾所在。暴漫作为一家初创公司在前期没法实现盈利，现金流有限，所以只能把主要资金用于扩大经营而无法给予公司主创人员合理的回报。公司只能压低员工工资降低成本，这个只要双方有共识，公平透明地签署合同，把薪资明确写在合同里是没有问题的（大家共同「用爱发电」）。</summary>
    
    
    
    <category term="观察者" scheme="https://blog.dlzhang.com/overview/viewpoint/"/>
    
    
    <category term="知乎" scheme="https://blog.dlzhang.com/overview/tags/%E7%9F%A5%E4%B9%8E/"/>
    
    <category term="综艺" scheme="https://blog.dlzhang.com/overview/tags/%E7%BB%BC%E8%89%BA/"/>
    
    <category term="法律" scheme="https://blog.dlzhang.com/overview/tags/%E6%B3%95%E5%BE%8B/"/>
    
  </entry>
  
</feed>
